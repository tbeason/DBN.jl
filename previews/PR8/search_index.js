var documenterSearchIndex = {"docs":
[{"location":"api/reading/#Reading-API-Reference","page":"Reading","title":"Reading API Reference","text":"","category":"section"},{"location":"api/reading/","page":"Reading","title":"Reading","text":"Functions for reading DBN files.","category":"page"},{"location":"api/reading/#Generic-Reading","page":"Reading","title":"Generic Reading","text":"","category":"section"},{"location":"api/reading/#DBN.read_dbn","page":"Reading","title":"DBN.read_dbn","text":"read_dbn(filename::String)\n\nConvenience function to read all records from a DBN file.\n\nArguments\n\nfilename::String: Path to the DBN file (compressed or uncompressed)\n\nReturns\n\nVector: Array containing all records from the file\n\nDetails\n\nReads the entire DBN file into memory, automatically handling:\n\nCompression detection and decompression\nResource cleanup\nError recovery for unknown record types\n\nFor large files, consider using DBNStream for memory-efficient streaming. For metadata access, use read_dbn_with_metadata().\n\nExample\n\nrecords = read_dbn(\"data.dbn\")\nfor record in records\n    println(typeof(record))\nend\n\n\n\n\n\n","category":"function"},{"location":"api/reading/#DBN.read_dbn_with_metadata","page":"Reading","title":"DBN.read_dbn_with_metadata","text":"read_dbn_with_metadata(filename::String)\n\nRead a DBN file and return both metadata and records.\n\nArguments\n\nfilename::String: Path to the DBN file (compressed or uncompressed)\n\nReturns\n\nTuple{Metadata, Vector}: A tuple containing the file metadata and array of all records\n\nDetails\n\nSimilar to read_dbn() but also returns the file metadata containing dataset information, schema, timestamp ranges, symbol mappings, and other file properties.\n\nExample\n\nmetadata, records = read_dbn_with_metadata(\"data.dbn\")\nprintln(\"Dataset: $(metadata.dataset)\")\nprintln(\"Schema: $(metadata.schema)\")\nprintln(\"Records: $(length(records))\")\n\n\n\n\n\n","category":"function"},{"location":"api/reading/#DBN.read_dbn_typed","page":"Reading","title":"DBN.read_dbn_typed","text":"read_dbn_typed(filename::String, ::Type{T}) where T -> Vector{T}\n\nRead a DBN file into a type-specific vector, avoiding Union overhead.\n\nImplementation\n\nThis function is now built on top of the optimized foreach_record callback API, which provides near-zero allocation streaming. The eager read pre-allocates the exact vector size and streams records directly into it.\n\nPerformance\n\nThis function provides 5-6x better performance than read_dbn() by eliminating Union type overhead and GC pressure. Use this when you know all records will be of a single type (e.g., all TradeMsg).\n\nArguments\n\nfilename::String: Path to DBN file\n::Type{T}: Expected record type (e.g., TradeMsg, MBOMsg)\n\nReturns\n\nVector{T}: Type-specific vector of records\n\nPerformance Comparison\n\nread_dbn(): ~3 M rec/s (flexible, supports mixed types)\nread_dbn_typed(): ~17 M rec/s (fast, single type only)\n\nExample\n\n# 5-6x faster than read_dbn() when schema is known\ntrades = read_dbn_typed(\"trades.dbn\", TradeMsg)\nmbos = read_dbn_typed(\"mbo.dbn\", MBOMsg)\n\nWarning\n\nIf the file contains records of different types, this will error. For mixed-type files, use read_dbn() instead.\n\n\n\n\n\n","category":"function"},{"location":"api/reading/#Type-Specific-Readers","page":"Reading","title":"Type-Specific Readers","text":"","category":"section"},{"location":"api/reading/","page":"Reading","title":"Reading","text":"These functions are 5-6x faster than the generic read_dbn() when you know the schema.","category":"page"},{"location":"api/reading/#Trade-Data","page":"Reading","title":"Trade Data","text":"","category":"section"},{"location":"api/reading/#DBN.read_trades","page":"Reading","title":"DBN.read_trades","text":"read_trades(filename::String) -> Vector{TradeMsg}\n\nFast reader for trade data files. 5-6x faster than read_dbn().\n\n\n\n\n\n","category":"function"},{"location":"api/reading/#Market-by-Order-(MBO)","page":"Reading","title":"Market-by-Order (MBO)","text":"","category":"section"},{"location":"api/reading/#DBN.read_mbo","page":"Reading","title":"DBN.read_mbo","text":"read_mbo(filename::String) -> Vector{MBOMsg}\n\nFast reader for MBO (Market By Order) data files. 5-6x faster than read_dbn().\n\n\n\n\n\n","category":"function"},{"location":"api/reading/#Market-by-Price-(MBP)","page":"Reading","title":"Market-by-Price (MBP)","text":"","category":"section"},{"location":"api/reading/#DBN.read_mbp1","page":"Reading","title":"DBN.read_mbp1","text":"read_mbp1(filename::String) -> Vector{MBP1Msg}\n\nFast reader for MBP-1 (top-of-book) data files. 5-6x faster than read_dbn().\n\n\n\n\n\n","category":"function"},{"location":"api/reading/#DBN.read_mbp10","page":"Reading","title":"DBN.read_mbp10","text":"read_mbp10(filename::String) -> Vector{MBP10Msg}\n\nFast reader for MBP-10 (10-level depth) data files. 5-6x faster than read_dbn().\n\n\n\n\n\n","category":"function"},{"location":"api/reading/#Top-of-Book-(BBO/TBBO)","page":"Reading","title":"Top of Book (BBO/TBBO)","text":"","category":"section"},{"location":"api/reading/#DBN.read_tbbo","page":"Reading","title":"DBN.read_tbbo","text":"read_tbbo(filename::String) -> Vector{MBP1Msg}\n\nFast reader for TBBO (Trade BBO) data files. Uses MBP-1 records. 5-6x faster than read_dbn().\n\n\n\n\n\n","category":"function"},{"location":"api/reading/#DBN.read_bbo1s","page":"Reading","title":"DBN.read_bbo1s","text":"read_bbo1s(filename::String) -> Vector{BBO1sMsg}\n\nFast reader for BBO 1-second data files. 5-6x faster than read_dbn().\n\n\n\n\n\n","category":"function"},{"location":"api/reading/#DBN.read_bbo1m","page":"Reading","title":"DBN.read_bbo1m","text":"read_bbo1m(filename::String) -> Vector{BBO1mMsg}\n\nFast reader for BBO 1-minute data files. 5-6x faster than read_dbn().\n\n\n\n\n\n","category":"function"},{"location":"api/reading/#OHLCV-(Bars)","page":"Reading","title":"OHLCV (Bars)","text":"","category":"section"},{"location":"api/reading/#DBN.read_ohlcv","page":"Reading","title":"DBN.read_ohlcv","text":"read_ohlcv(filename::String) -> Vector{OHLCVMsg}\n\nFast reader for OHLCV (candlestick) data files. 5-6x faster than read_dbn().\n\n\n\n\n\n","category":"function"},{"location":"api/reading/#DBN.read_ohlcv_1s","page":"Reading","title":"DBN.read_ohlcv_1s","text":"read_ohlcv_1s(filename::String) -> Vector{OHLCVMsg}\n\nFast reader for 1-second OHLCV data files. 5-6x faster than read_dbn().\n\n\n\n\n\n","category":"function"},{"location":"api/reading/#DBN.read_ohlcv_1m","page":"Reading","title":"DBN.read_ohlcv_1m","text":"read_ohlcv_1m(filename::String) -> Vector{OHLCVMsg}\n\nFast reader for 1-minute OHLCV data files. 5-6x faster than read_dbn().\n\n\n\n\n\n","category":"function"},{"location":"api/reading/#DBN.read_ohlcv_1h","page":"Reading","title":"DBN.read_ohlcv_1h","text":"read_ohlcv_1h(filename::String) -> Vector{OHLCVMsg}\n\nFast reader for 1-hour OHLCV data files. 5-6x faster than read_dbn().\n\n\n\n\n\n","category":"function"},{"location":"api/reading/#DBN.read_ohlcv_1d","page":"Reading","title":"DBN.read_ohlcv_1d","text":"read_ohlcv_1d(filename::String) -> Vector{OHLCVMsg}\n\nFast reader for 1-day OHLCV data files. 5-6x faster than read_dbn().\n\n\n\n\n\n","category":"function"},{"location":"api/reading/#Consolidated-Market-Data","page":"Reading","title":"Consolidated Market Data","text":"","category":"section"},{"location":"api/reading/#DBN.read_cmbp1","page":"Reading","title":"DBN.read_cmbp1","text":"read_cmbp1(filename::String) -> Vector{CMBP1Msg}\n\nFast reader for Consolidated MBP-1 data files. 5-6x faster than read_dbn().\n\n\n\n\n\n","category":"function"},{"location":"api/reading/#DBN.read_cbbo1s","page":"Reading","title":"DBN.read_cbbo1s","text":"read_cbbo1s(filename::String) -> Vector{CBBO1sMsg}\n\nFast reader for Consolidated BBO 1-second data files. 5-6x faster than read_dbn().\n\n\n\n\n\n","category":"function"},{"location":"api/reading/#DBN.read_cbbo1m","page":"Reading","title":"DBN.read_cbbo1m","text":"read_cbbo1m(filename::String) -> Vector{CBBO1mMsg}\n\nFast reader for Consolidated BBO 1-minute data files. 5-6x faster than read_dbn().\n\n\n\n\n\n","category":"function"},{"location":"api/reading/#DBN.read_tcbbo","page":"Reading","title":"DBN.read_tcbbo","text":"read_tcbbo(filename::String) -> Vector{TCBBOMsg}\n\nFast reader for Top Consolidated BBO data files. 5-6x faster than read_dbn().\n\n\n\n\n\n","category":"function"},{"location":"api/reading/#Performance-Tips","page":"Reading","title":"Performance Tips","text":"","category":"section"},{"location":"api/reading/","page":"Reading","title":"Reading","text":"For maximum performance when reading:","category":"page"},{"location":"api/reading/","page":"Reading","title":"Reading","text":"Use type-specific readers when you know the schema (5-6x faster)\nUse callback streaming for processing without keeping data in memory (fastest)\nUse iterators for flexible streaming with control flow\nWork with compressed files directly (no need to decompress first)","category":"page"},{"location":"api/reading/","page":"Reading","title":"Reading","text":"See the Reading Guide for detailed usage examples and performance comparisons.","category":"page"},{"location":"api/conversion/#Conversion-API-Reference","page":"Conversion","title":"Conversion API Reference","text":"","category":"section"},{"location":"api/conversion/","page":"Conversion","title":"Conversion","text":"Functions for converting between DBN and other formats.","category":"page"},{"location":"api/conversion/#Export-(DBN-to-Other-Formats)","page":"Conversion","title":"Export (DBN to Other Formats)","text":"","category":"section"},{"location":"api/conversion/#DBN.dbn_to_csv","page":"Conversion","title":"DBN.dbn_to_csv","text":"dbn_to_csv(input_file, output_file)\n\nConvert a DBN file to CSV format.\n\nArguments\n\ninput_file::String: Path to input DBN file\noutput_file::String: Path to output CSV file\n\nExample\n\ndbn_to_csv(\"data.dbn\", \"data.csv\")\n\n\n\n\n\n","category":"function"},{"location":"api/conversion/#DBN.dbn_to_json","page":"Conversion","title":"DBN.dbn_to_json","text":"dbn_to_json(input_file, output_file; pretty=false)\n\nConvert a DBN file to JSON format.\n\nArguments\n\ninput_file::String: Path to input DBN file\noutput_file::String: Path to output JSON file\npretty::Bool: Whether to pretty-print the JSON (default: false)\n\nExample\n\ndbn_to_json(\"data.dbn\", \"data.json\", pretty=true)\n\n\n\n\n\n","category":"function"},{"location":"api/conversion/#DBN.dbn_to_parquet","page":"Conversion","title":"DBN.dbn_to_parquet","text":"dbn_to_parquet(input_file, output_file)\n\nConvert a DBN file to Parquet format.\n\nArguments\n\ninput_file::String: Path to input DBN file\noutput_file::String: Path to output Parquet file\n\nExample\n\ndbn_to_parquet(\"data.dbn\", \"data.parquet\")\n\n\n\n\n\n","category":"function"},{"location":"api/conversion/#DBN.records_to_dataframe","page":"Conversion","title":"DBN.records_to_dataframe","text":"records_to_dataframe(records)\n\nConvert DBN records to a DataFrame.\n\n\n\n\n\n","category":"function"},{"location":"api/conversion/#Import-(Other-Formats-to-DBN)","page":"Conversion","title":"Import (Other Formats to DBN)","text":"","category":"section"},{"location":"api/conversion/#DBN.json_to_dbn","page":"Conversion","title":"DBN.json_to_dbn","text":"json_to_dbn(input_file, output_file)\n\nConvert a JSON file to DBN format.\n\nArguments\n\ninput_file::String: Path to input JSON file\noutput_file::String: Path to output DBN file\n\nJSON Format\n\nExpects JSON with structure:\n\n{\n  \"metadata\": { ... },\n  \"records\": [ ... ]\n}\n\nOr JSONL format (one record per line).\n\nExample\n\njson_to_dbn(\"data.json\", \"data.dbn\")\n\n\n\n\n\n","category":"function"},{"location":"api/conversion/#DBN.csv_to_dbn","page":"Conversion","title":"DBN.csv_to_dbn","text":"csv_to_dbn(input_file, output_file; schema=nothing, dataset=\"\")\n\nConvert a CSV file to DBN format.\n\nArguments\n\ninput_file::String: Path to input CSV file\noutput_file::String: Path to output DBN file\nschema: DBN schema (will be inferred if not provided)\ndataset::String: Dataset name for metadata\n\nExample\n\ncsv_to_dbn(\"data.csv\", \"data.dbn\", schema=Schema.TRADES, dataset=\"XNAS\")\n\n\n\n\n\n","category":"function"},{"location":"api/conversion/#DBN.parquet_to_dbn","page":"Conversion","title":"DBN.parquet_to_dbn","text":"parquet_to_dbn(input_file, output_file; schema=nothing, dataset=\"\")\n\nConvert a Parquet file to DBN format.\n\nArguments\n\ninput_file::String: Path to input Parquet file\noutput_file::String: Path to output DBN file\nschema: DBN schema (will be inferred if not provided)\ndataset::String: Dataset name for metadata\n\nExample\n\nparquet_to_dbn(\"data.parquet\", \"data.dbn\", schema=Schema.TRADES, dataset=\"XNAS\")\n\n\n\n\n\n","category":"function"},{"location":"api/conversion/#Usage-Examples","page":"Conversion","title":"Usage Examples","text":"","category":"section"},{"location":"api/conversion/#Exporting-Data","page":"Conversion","title":"Exporting Data","text":"","category":"section"},{"location":"api/conversion/","page":"Conversion","title":"Conversion","text":"# Convert to CSV\ndbn_to_csv(\"trades.dbn\", \"trades.csv\")\n\n# Convert to JSON\ndbn_to_json(\"trades.dbn\", \"trades.json\")\n\n# Convert to Parquet\ndbn_to_parquet(\"trades.dbn\", \"output_dir/\")\n\n# Convert to DataFrame for analysis\nrecords = read_trades(\"trades.dbn\")\ndf = records_to_dataframe(records)","category":"page"},{"location":"api/conversion/#Importing-Data","page":"Conversion","title":"Importing Data","text":"","category":"section"},{"location":"api/conversion/","page":"Conversion","title":"Conversion","text":"# From JSON\njson_to_dbn(\"trades.json\", \"trades.dbn\")\n\n# From CSV (requires schema)\ncsv_to_dbn(\"trades.csv\", \"trades.dbn\",\n           schema=Schema.TRADES,\n           dataset=\"XNAS\")\n\n# From Parquet (requires schema)\nparquet_to_dbn(\"trades.parquet\", \"trades.dbn\",\n               schema=Schema.TRADES,\n               dataset=\"XNAS\")","category":"page"},{"location":"api/conversion/#See-Also","page":"Conversion","title":"See Also","text":"","category":"section"},{"location":"api/conversion/","page":"Conversion","title":"Conversion","text":"Conversion Guide - Detailed conversion documentation\nReading - Reading DBN files\nWriting - Writing DBN files","category":"page"},{"location":"installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"installation/#Requirements","page":"Installation","title":"Requirements","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"Julia 1.12 or later\nOperating System: Windows, macOS, or Linux","category":"page"},{"location":"installation/#Installing-DBN.jl","page":"Installation","title":"Installing DBN.jl","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"note: Note\nDBN.jl is not yet registered in the Julia General registry. Install directly from GitHub.","category":"page"},{"location":"installation/#From-GitHub","page":"Installation","title":"From GitHub","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"using Pkg\nPkg.add(url=\"https://github.com/tbeason/DBN.jl\")","category":"page"},{"location":"installation/#Development-Installation","page":"Installation","title":"Development Installation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"If you want to modify the package or contribute:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"using Pkg\nPkg.develop(url=\"https://github.com/tbeason/DBN.jl\")","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"This will clone the repository to ~/.julia/dev/DBN.","category":"page"},{"location":"installation/#Verifying-Installation","page":"Installation","title":"Verifying Installation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"Test that DBN.jl is installed correctly:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"using DBN\n\n# Check package version\nprintln(Pkg.TOML.parsefile(joinpath(dirname(pathof(DBN)), \"..\", \"Project.toml\"))[\"version\"])\n\n# Test basic functionality\n# (assumes you have a DBN file to test with)\n# records = read_dbn(\"path/to/test.dbn\")","category":"page"},{"location":"installation/#Dependencies","page":"Installation","title":"Dependencies","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"DBN.jl has the following dependencies (automatically installed):","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"CodecZstd - Zstd compression support\nCSV - CSV file conversion\nJSON3 - JSON file conversion\nParquet2 - Parquet file conversion\nDataFrames - DataFrame conversion\nEnumX - Enhanced enum support\nStructTypes - Type serialization\nTranscodingStreams - Streaming compression\nDates - Timestamp handling\nStatistics - Basic statistical functions","category":"page"},{"location":"installation/#Troubleshooting","page":"Installation","title":"Troubleshooting","text":"","category":"section"},{"location":"installation/#Package-Not-Found","page":"Installation","title":"Package Not Found","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"If you get a \"Package not found\" error, make sure you're using the full GitHub URL:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Pkg.add(url=\"https://github.com/tbeason/DBN.jl\")","category":"page"},{"location":"installation/#Dependency-Conflicts","page":"Installation","title":"Dependency Conflicts","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"If you encounter dependency version conflicts:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"# Update all packages\nPkg.update()\n\n# Resolve package versions\nPkg.resolve()","category":"page"},{"location":"installation/#Zstd-Compression-Issues","page":"Installation","title":"Zstd Compression Issues","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"If you have issues with .zst compressed files, verify CodecZstd is installed:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"using CodecZstd","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"If this fails, reinstall the codec:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Pkg.rm(\"CodecZstd\")\nPkg.add(\"CodecZstd\")","category":"page"},{"location":"installation/#Next-Steps","page":"Installation","title":"Next Steps","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"Quick Start Guide - Get started in 5 minutes\nReading Data - Learn the different ways to read DBN files\nAPI Reference - Explore the full API","category":"page"},{"location":"performance/#Performance","page":"Performance","title":"Performance","text":"","category":"section"},{"location":"performance/","page":"Performance","title":"Performance","text":"DBN.jl is designed for high-throughput market data processing. This page provides performance characteristics, benchmarks, and optimization tips.","category":"page"},{"location":"performance/#Performance-Summary","page":"Performance","title":"Performance Summary","text":"","category":"section"},{"location":"performance/","page":"Performance","title":"Performance","text":"Operation Best Method Throughput Memory\nReading Callback streaming 40M rec/sec Minimal (KB)\nReading Type-specific reader 28M rec/sec Full file\nReading Generic iterator 10M rec/sec Moderate\nWriting Bulk write 11M rec/sec Full file\nWriting Stream writer 10M rec/sec Half file","category":"page"},{"location":"performance/","page":"Performance","title":"Performance","text":"Benchmarks: 10M trade messages on modern hardware","category":"page"},{"location":"performance/#Reading-Performance","page":"Performance","title":"Reading Performance","text":"","category":"section"},{"location":"performance/#Method-Comparison-(10M-Trades,-Uncompressed)","page":"Performance","title":"Method Comparison (10M Trades, Uncompressed)","text":"","category":"section"},{"location":"performance/","page":"Performance","title":"Performance","text":"Method Throughput Time Memory\nforeach_trade() callback 42.37 M/s 0.236s 0.1 MB\nread_trades() optimized 27.94 M/s 0.358s 458 MB\nDBNStream() iterator 10.21 M/s 0.979s 1221 MB\nread_dbn() generic 6.86 M/s 1.457s 687 MB","category":"page"},{"location":"performance/","page":"Performance","title":"Performance","text":"Key Takeaways:","category":"page"},{"location":"performance/","page":"Performance","title":"Performance","text":"Callback streaming is 6x faster than generic read\nType-specific readers are 4x faster than generic read\nCallbacks use ~6,000x less memory than iterators","category":"page"},{"location":"performance/#With-Compression-(.zst)","page":"Performance","title":"With Compression (.zst)","text":"","category":"section"},{"location":"performance/","page":"Performance","title":"Performance","text":"Method Throughput Time Memory\nforeach_trade() callback 19.24 M/s 0.520s 0.8 MB\nread_trades() optimized 15.65 M/s 0.639s 459 MB\nDBNStream() iterator 5.94 M/s 1.683s 1222 MB\nread_dbn() generic 4.74 M/s 2.109s 687 MB","category":"page"},{"location":"performance/","page":"Performance","title":"Performance","text":"Compression reduces throughput by ~50% but file sizes by ~3x.","category":"page"},{"location":"performance/#Writing-Performance","page":"Performance","title":"Writing Performance","text":"","category":"section"},{"location":"performance/#Method-Comparison-(10M-Trades)","page":"Performance","title":"Method Comparison (10M Trades)","text":"","category":"section"},{"location":"performance/","page":"Performance","title":"Performance","text":"Method Compressed Throughput Time Memory\nwrite_dbn() No 11.57 M/s 0.864s 1221 MB\nDBNStreamWriter No 11.82 M/s 0.846s 610 MB\nwrite_dbn() Yes (.zst) 4.70 M/s 2.125s 1221 MB\nDBNStreamWriter Yes (.zst) 11.27 M/s 0.887s 610 MB","category":"page"},{"location":"performance/","page":"Performance","title":"Performance","text":"Key Takeaways:","category":"page"},{"location":"performance/","page":"Performance","title":"Performance","text":"Streaming writer uses 50% less memory\nBulk write and stream write have similar throughput\nCompression adds overhead but reduces file size significantly","category":"page"},{"location":"performance/#Schema-Specific-Performance","page":"Performance","title":"Schema-Specific Performance","text":"","category":"section"},{"location":"performance/","page":"Performance","title":"Performance","text":"Different message types have different performance characteristics due to record size and complexity.","category":"page"},{"location":"performance/#Read-Performance-by-Schema-(10M-records,-uncompressed)","page":"Performance","title":"Read Performance by Schema (10M records, uncompressed)","text":"","category":"section"},{"location":"performance/","page":"Performance","title":"Performance","text":"Schema Callback Type-Specific Generic\nTrades 42.37 M/s 27.94 M/s 6.86 M/s\nMBO 34.17 M/s 23.35 M/s 2.94 M/s\nOHLCV 41.33 M/s 24.90 M/s 6.49 M/s","category":"page"},{"location":"performance/","page":"Performance","title":"Performance","text":"Larger records (MBO) are slightly slower due to more data transfer.","category":"page"},{"location":"performance/#File-Size-and-Compression","page":"Performance","title":"File Size and Compression","text":"","category":"section"},{"location":"performance/#Compression-Ratios","page":"Performance","title":"Compression Ratios","text":"","category":"section"},{"location":"performance/","page":"Performance","title":"Performance","text":"Schema Uncompressed Compressed (.zst) Ratio\nTrades (1M) 46 MB 16 MB 2.9x\nMBO (1M) 53 MB 18 MB 2.9x\nOHLCV (10M) 534 MB 279 MB 1.9x","category":"page"},{"location":"performance/","page":"Performance","title":"Performance","text":"Recommendation: Use .zst compression for storage and archival.","category":"page"},{"location":"performance/#Format-Comparison-(1M-Trades)","page":"Performance","title":"Format Comparison (1M Trades)","text":"","category":"section"},{"location":"performance/","page":"Performance","title":"Performance","text":"Format Size Ratio vs DBN\nDBN (compressed) 16 MB 1.0x (best)\nDBN (uncompressed) 46 MB 2.9x\nParquet 25 MB 1.6x\nCSV 95 MB 5.9x\nJSON 180 MB 11.3x","category":"page"},{"location":"performance/#Optimization-Tips","page":"Performance","title":"Optimization Tips","text":"","category":"section"},{"location":"performance/#1.-Choose-the-Right-Reading-Method","page":"Performance","title":"1. Choose the Right Reading Method","text":"","category":"section"},{"location":"performance/","page":"Performance","title":"Performance","text":"# ✅ For processing/aggregation - use callbacks (fastest)\ntotal = Ref(0)\nforeach_trade(\"file.dbn\") do trade\n    total[] += trade.size\nend\n\n# ✅ For bulk loading - use type-specific readers\ntrades = read_trades(\"file.dbn\")  # 5-6x faster than read_dbn()\n\n# ✅ For flexible iteration - use DBNStream\nfor trade in DBNStream(\"file.dbn\")\n    if some_condition(trade)\n        break  # Can exit early\n    end\nend\n\n# ❌ Avoid generic reader when schema is known\nrecords = read_dbn(\"trades.dbn\")  # Slower!","category":"page"},{"location":"performance/#2.-Use-Type-Specific-Readers","page":"Performance","title":"2. Use Type-Specific Readers","text":"","category":"section"},{"location":"performance/","page":"Performance","title":"Performance","text":"# ❌ Generic (slow)\nrecords = read_dbn(\"trades.dbn\")\n\n# ✅ Type-specific (5-6x faster)\ntrades = read_trades(\"trades.dbn\")","category":"page"},{"location":"performance/#3.-Stream-Large-Files","page":"Performance","title":"3. Stream Large Files","text":"","category":"section"},{"location":"performance/","page":"Performance","title":"Performance","text":"# ❌ Don't load huge files into memory\nall_data = read_trades(\"100gb_file.dbn\")  # Will exhaust memory!\n\n# ✅ Stream instead\nforeach_trade(\"100gb_file.dbn\") do trade\n    process(trade)\nend","category":"page"},{"location":"performance/#4.-Use-Compression-for-Storage","page":"Performance","title":"4. Use Compression for Storage","text":"","category":"section"},{"location":"performance/","page":"Performance","title":"Performance","text":"# ✅ 2-3x smaller files\nwrite_dbn(\"output.dbn.zst\", metadata, records)\n\n# ❌ Larger files\nwrite_dbn(\"output.dbn\", metadata, records)","category":"page"},{"location":"performance/#5.-Pre-allocate-Collections","page":"Performance","title":"5. Pre-allocate Collections","text":"","category":"section"},{"location":"performance/","page":"Performance","title":"Performance","text":"# ✅ Pre-allocate when size is known\nfiltered = Vector{TradeMsg}()\nsizehint!(filtered, expected_count)\n\nforeach_trade(\"file.dbn\") do trade\n    if condition(trade)\n        push!(filtered, trade)\n    end\nend","category":"page"},{"location":"performance/#6.-Minimize-Work-in-Loops","page":"Performance","title":"6. Minimize Work in Loops","text":"","category":"section"},{"location":"performance/","page":"Performance","title":"Performance","text":"# ✅ Hoist constant computations\nthreshold = calculate_threshold()\nforeach_trade(\"file.dbn\") do trade\n    if trade.size > threshold\n        process(trade)\n    end\nend\n\n# ❌ Don't repeat expensive operations\nforeach_trade(\"file.dbn\") do trade\n    if trade.size > calculate_threshold()  # Repeated!\n        process(trade)\n    end\nend","category":"page"},{"location":"performance/#7.-Use-Refs-for-Callback-Accumulation","page":"Performance","title":"7. Use Refs for Callback Accumulation","text":"","category":"section"},{"location":"performance/","page":"Performance","title":"Performance","text":"# ✅ Use Ref for mutable state in callbacks\ncount = Ref(0)\nforeach_trade(\"file.dbn\") do trade\n    count[] += 1\nend\n\n# ❌ Won't work (immutable)\ncount = 0\nforeach_trade(\"file.dbn\") do trade\n    count += 1  # ERROR: count is immutable in this scope\nend","category":"page"},{"location":"performance/#Comparison-with-Other-Implementations","page":"Performance","title":"Comparison with Other Implementations","text":"","category":"section"},{"location":"performance/","page":"Performance","title":"Performance","text":"DBN.jl performance compared to official implementations:","category":"page"},{"location":"performance/#Read-Performance-(Trades,-Uncompressed)","page":"Performance","title":"Read Performance (Trades, Uncompressed)","text":"","category":"section"},{"location":"performance/","page":"Performance","title":"Performance","text":"Implementation Size Throughput\nDBN.jl (callback) 10M 42.37 M/s\nDBN.jl (optimized) 10M 27.94 M/s\nPython databento-dbn 10M 9.23 M/s\nRust dbn - (Reference)","category":"page"},{"location":"performance/","page":"Performance","title":"Performance","text":"DBN.jl callback streaming is 4.5x faster than Python implementation.","category":"page"},{"location":"performance/#Write-Performance-(Trades,-Uncompressed)","page":"Performance","title":"Write Performance (Trades, Uncompressed)","text":"","category":"section"},{"location":"performance/","page":"Performance","title":"Performance","text":"Implementation Size Throughput\nDBN.jl 10M 11.57 M/s\nPython databento-dbn 10M 43.79 M/s","category":"page"},{"location":"performance/","page":"Performance","title":"Performance","text":"Python has faster write performance due to optimized C extensions.","category":"page"},{"location":"performance/#Hardware-Impact","page":"Performance","title":"Hardware Impact","text":"","category":"section"},{"location":"performance/","page":"Performance","title":"Performance","text":"Performance scales with:","category":"page"},{"location":"performance/","page":"Performance","title":"Performance","text":"CPU speed: Single-threaded performance matters most\nMemory bandwidth: Important for bulk operations\nSSD speed: Matters for large compressed files\nAvailable RAM: Determines max file size for bulk reads","category":"page"},{"location":"performance/#Benchmarking-Your-System","page":"Performance","title":"Benchmarking Your System","text":"","category":"section"},{"location":"performance/","page":"Performance","title":"Performance","text":"Run benchmarks on your hardware:","category":"page"},{"location":"performance/","page":"Performance","title":"Performance","text":"using DBN, BenchmarkTools\n\n# Download test data or generate synthetic data\n# trades = generate_test_trades(10_000_000)\n# write_dbn(\"test.dbn\", metadata, trades)\n\n# Benchmark reading\n@benchmark read_trades(\"test.dbn\")\n@benchmark foreach_trade(\"test.dbn\") do t; end\n\n# Benchmark writing\n@benchmark write_dbn(\"out.dbn\", $metadata, $trades)","category":"page"},{"location":"performance/#See-Also","page":"Performance","title":"See Also","text":"","category":"section"},{"location":"performance/","page":"Performance","title":"Performance","text":"Reading Guide - Detailed reading methods\nStreaming Guide - Streaming patterns\nWriting Guide - Writing methods\nFull benchmarks: benchmark/PERFORMANCE_REPORT.md in repository","category":"page"},{"location":"guide/writing/#Writing-Data","page":"Writing Data","title":"Writing Data","text":"","category":"section"},{"location":"guide/writing/","page":"Writing Data","title":"Writing Data","text":"DBN.jl provides two main approaches for writing DBN files: bulk writing for pre-existing data, and streaming for real-time data ingestion.","category":"page"},{"location":"guide/writing/#Quick-Reference","page":"Writing Data","title":"Quick Reference","text":"","category":"section"},{"location":"guide/writing/","page":"Writing Data","title":"Writing Data","text":"Method Best For Performance\nwrite_dbn() Bulk writing existing data 11M records/sec\nDBNStreamWriter Real-time/streaming data Continuous writing","category":"page"},{"location":"guide/writing/#Bulk-Writing","page":"Writing Data","title":"Bulk Writing","text":"","category":"section"},{"location":"guide/writing/#Basic-Usage","page":"Writing Data","title":"Basic Usage","text":"","category":"section"},{"location":"guide/writing/","page":"Writing Data","title":"Writing Data","text":"Write a collection of records with metadata:","category":"page"},{"location":"guide/writing/","page":"Writing Data","title":"Writing Data","text":"using DBN, Dates\n\n# Your records (e.g., from reading another file or creating synthetically)\nrecords = [trade1, trade2, trade3, ...]\n\n# Create metadata\nmetadata = Metadata(\n    UInt8(3),                    # DBN version (use 3)\n    \"XNAS\",                      # dataset (e.g., \"XNAS\", \"GLBX\")\n    Schema.TRADES,               # schema\n    datetime_to_ts(DateTime(2024, 1, 1)),  # start timestamp\n    datetime_to_ts(DateTime(2024, 1, 2)),  # end timestamp\n    UInt64(length(records)),     # limit (number of records)\n    SType.RAW_SYMBOL,            # input symbol type\n    SType.RAW_SYMBOL,            # output symbol type\n    false,                       # ts_out (false unless upgrading)\n    String[],                    # symbols\n    String[],                    # partial\n    String[],                    # not_found\n    Tuple{String, String, Int64, Int64}[]  # mappings\n)\n\n# Write to file\nwrite_dbn(\"output.dbn\", metadata, records)","category":"page"},{"location":"guide/writing/#Writing-with-Compression","page":"Writing Data","title":"Writing with Compression","text":"","category":"section"},{"location":"guide/writing/","page":"Writing Data","title":"Writing Data","text":"Automatically compress with Zstd by using .zst extension:","category":"page"},{"location":"guide/writing/","page":"Writing Data","title":"Writing Data","text":"# Compressed output (smaller file size)\nwrite_dbn(\"output.dbn.zst\", metadata, records)","category":"page"},{"location":"guide/writing/","page":"Writing Data","title":"Writing Data","text":"Compression ratios typically range from 2-3x for market data.","category":"page"},{"location":"guide/writing/#Creating-Metadata","page":"Writing Data","title":"Creating Metadata","text":"","category":"section"},{"location":"guide/writing/","page":"Writing Data","title":"Writing Data","text":"The Metadata constructor requires several fields. Here's a detailed breakdown:","category":"page"},{"location":"guide/writing/","page":"Writing Data","title":"Writing Data","text":"metadata = Metadata(\n    UInt8(3),              # version: Always use 3 for DBN v3\n    \"XNAS\",                # dataset: Data source identifier\n    Schema.TRADES,         # schema: Message schema (TRADES, MBO, MBP_1, etc.)\n    start_ts,              # start_ts: First record timestamp (nanoseconds)\n    end_ts,                # end_ts: Last record timestamp (nanoseconds)\n    UInt64(num_records),   # limit: Total number of records\n    SType.RAW_SYMBOL,      # stype_in: Input symbol type\n    SType.RAW_SYMBOL,      # stype_out: Output symbol type\n    false,                 # ts_out: Include ts_out field?\n    String[],              # symbols: List of symbols (if applicable)\n    String[],              # partial: Partial symbols\n    String[],              # not_found: Symbols not found\n    Tuple{String, String, Int64, Int64}[]  # mappings: Symbol mappings\n)","category":"page"},{"location":"guide/writing/","page":"Writing Data","title":"Writing Data","text":"Field explanations:","category":"page"},{"location":"guide/writing/","page":"Writing Data","title":"Writing Data","text":"version: Use 3 for DBN v3 (current standard)\ndataset: String identifier (e.g., \"XNAS\", \"GLBX\", \"TEST\")\nschema: One of the Schema enum values\nstartts/endts: Nanosecond timestamps from first/last record\nlimit: Total record count\nstypein/stypeout: Symbol type (usually SType.RAW_SYMBOL)\nts_out: Set to true only when converting from older DBN versions\nsymbols: List of symbols in file (can be empty)\npartial/not_found/mappings: Usually empty for custom files","category":"page"},{"location":"guide/writing/#Copying-Metadata-from-Existing-File","page":"Writing Data","title":"Copying Metadata from Existing File","text":"","category":"section"},{"location":"guide/writing/","page":"Writing Data","title":"Writing Data","text":"When transforming existing data, reuse metadata:","category":"page"},{"location":"guide/writing/","page":"Writing Data","title":"Writing Data","text":"# Read existing file with metadata\nmetadata, records = read_dbn_with_metadata(\"input.dbn\")\n\n# Filter or transform records\nfiltered = filter(r -> r.size > 1000, records)\n\n# Update metadata with new count\nnew_metadata = Metadata(\n    metadata.version,\n    metadata.dataset,\n    metadata.schema,\n    filtered[1].hd.ts_event,      # New start time\n    filtered[end].hd.ts_event,    # New end time\n    UInt64(length(filtered)),     # New count\n    metadata.stype_in,\n    metadata.stype_out,\n    metadata.ts_out,\n    metadata.symbols,\n    metadata.partial,\n    metadata.not_found,\n    metadata.mappings\n)\n\n# Write filtered data\nwrite_dbn(\"filtered.dbn\", new_metadata, filtered)","category":"page"},{"location":"guide/writing/#Streaming-Writer","page":"Writing Data","title":"Streaming Writer","text":"","category":"section"},{"location":"guide/writing/","page":"Writing Data","title":"Writing Data","text":"For writing data as it arrives (real-time or sequential processing):","category":"page"},{"location":"guide/writing/#Basic-Usage-2","page":"Writing Data","title":"Basic Usage","text":"","category":"section"},{"location":"guide/writing/","page":"Writing Data","title":"Writing Data","text":"using DBN\n\n# Create a streaming writer\nwriter = DBNStreamWriter(\"output.dbn\", \"XNAS\", Schema.TRADES)\n\n# Write records as they arrive\nfor price in [100.0, 100.25, 100.50, 100.75]\n    trade = create_trade(price)  # Your function to create trade\n    write_record!(writer, trade)\nend\n\n# Always close when done\nclose_writer!(writer)","category":"page"},{"location":"guide/writing/#Compressed-Streaming","page":"Writing Data","title":"Compressed Streaming","text":"","category":"section"},{"location":"guide/writing/","page":"Writing Data","title":"Writing Data","text":"Use .zst extension for compressed output:","category":"page"},{"location":"guide/writing/","page":"Writing Data","title":"Writing Data","text":"# Compressed streaming output\nwriter = DBNStreamWriter(\"output.dbn.zst\", \"XNAS\", Schema.TRADES)\n\n# Write records...\nwrite_record!(writer, trade)\n\nclose_writer!(writer)","category":"page"},{"location":"guide/writing/#Real-time-Data-Example","page":"Writing Data","title":"Real-time Data Example","text":"","category":"section"},{"location":"guide/writing/","page":"Writing Data","title":"Writing Data","text":"using DBN, Dates\n\n# Create writer for live data\nwriter = DBNStreamWriter(\"live_trades.dbn.zst\", \"XNAS\", Schema.TRADES)\n\ntry\n    # Simulate receiving live data\n    for event in event_stream  # Your data source\n        # Create trade message from event\n        trade = TradeMsg(\n            RecordHeader(\n                UInt8(sizeof(TradeMsg)),\n                RType.MBP_0_MSG,\n                UInt16(event.publisher_id),\n                UInt32(event.instrument_id),\n                datetime_to_ts(now())\n            ),\n            float_to_price(event.price),\n            UInt32(event.size),\n            Action.TRADE,\n            event.side,\n            UInt8(0), UInt8(0),\n            datetime_to_ts(now()),\n            Int32(0),\n            UInt32(event.sequence)\n        )\n\n        # Write immediately\n        write_record!(writer, trade)\n    end\nfinally\n    # Ensure writer is closed even if error occurs\n    close_writer!(writer)\nend","category":"page"},{"location":"guide/writing/#Creating-Messages","page":"Writing Data","title":"Creating Messages","text":"","category":"section"},{"location":"guide/writing/#Trade-Messages","page":"Writing Data","title":"Trade Messages","text":"","category":"section"},{"location":"guide/writing/","page":"Writing Data","title":"Writing Data","text":"using DBN, Dates\n\nfunction create_trade(price::Float64, size::Int, side::Side.T,\n                     instrument_id::Int = 12345,\n                     publisher_id::Int = 1,\n                     sequence::Int = 1)\n    timestamp = datetime_to_ts(now())\n\n    return TradeMsg(\n        RecordHeader(\n            UInt8(sizeof(TradeMsg)),\n            RType.MBP_0_MSG,      # Trades use MBP_0\n            UInt16(publisher_id),\n            UInt32(instrument_id),\n            timestamp\n        ),\n        float_to_price(price),\n        UInt32(size),\n        Action.TRADE,\n        side,\n        UInt8(0),           # flags\n        UInt8(0),           # depth\n        timestamp,          # ts_recv\n        Int32(0),           # ts_in_delta\n        UInt32(sequence)    # sequence number\n    )\nend\n\n# Usage\ntrade = create_trade(100.50, 100, Side.BID)","category":"page"},{"location":"guide/writing/#MBO-Messages","page":"Writing Data","title":"MBO Messages","text":"","category":"section"},{"location":"guide/writing/","page":"Writing Data","title":"Writing Data","text":"function create_mbo(order_id::Int, price::Float64, size::Int,\n                    action::Action.T, side::Side.T,\n                    instrument_id::Int = 12345)\n    timestamp = datetime_to_ts(now())\n\n    return MBOMsg(\n        RecordHeader(\n            UInt8(sizeof(MBOMsg)),\n            RType.MBO_MSG,\n            UInt16(1),\n            UInt32(instrument_id),\n            timestamp\n        ),\n        UInt64(order_id),\n        float_to_price(price),\n        UInt32(size),\n        UInt8(0),           # flags\n        UInt8(1),           # channel_id\n        action,\n        side,\n        timestamp,\n        Int32(0),\n        UInt32(1)\n    )\nend\n\n# Usage\nmbo = create_mbo(1000001, 100.50, 500, Action.ADD, Side.BID)","category":"page"},{"location":"guide/writing/#OHLCV-Messages","page":"Writing Data","title":"OHLCV Messages","text":"","category":"section"},{"location":"guide/writing/","page":"Writing Data","title":"Writing Data","text":"function create_ohlcv(open::Float64, high::Float64, low::Float64,\n                     close::Float64, volume::Int,\n                     bar_time::DateTime,\n                     instrument_id::Int = 12345)\n    return OHLCVMsg(\n        RecordHeader(\n            UInt8(sizeof(OHLCVMsg)),\n            RType.OHLCV_1M_MSG,    # 1-minute bars\n            UInt16(1),\n            UInt32(instrument_id),\n            datetime_to_ts(bar_time)\n        ),\n        float_to_price(open),\n        float_to_price(high),\n        float_to_price(low),\n        float_to_price(close),\n        UInt64(volume)\n    )\nend\n\n# Usage\nohlcv = create_ohlcv(100.0, 101.0, 99.5, 100.5, 50_000,\n                     DateTime(2024, 1, 1, 9, 30))","category":"page"},{"location":"guide/writing/#Transforming-Data","page":"Writing Data","title":"Transforming Data","text":"","category":"section"},{"location":"guide/writing/#Filter-and-Save","page":"Writing Data","title":"Filter and Save","text":"","category":"section"},{"location":"guide/writing/","page":"Writing Data","title":"Writing Data","text":"# Read source file\nsource_trades = read_trades(\"all_trades.dbn\")\n\n# Filter\nhigh_volume = filter(t -> t.size > 10_000, source_trades)\n\n# Create metadata (copy and adjust from source)\nmetadata, _ = read_dbn_with_metadata(\"all_trades.dbn\")\nnew_metadata = Metadata(\n    metadata.version, metadata.dataset, metadata.schema,\n    high_volume[1].hd.ts_event,\n    high_volume[end].hd.ts_event,\n    UInt64(length(high_volume)),\n    metadata.stype_in, metadata.stype_out, metadata.ts_out,\n    metadata.symbols, metadata.partial, metadata.not_found,\n    metadata.mappings\n)\n\n# Write filtered data\nwrite_dbn(\"high_volume.dbn.zst\", new_metadata, high_volume)","category":"page"},{"location":"guide/writing/#Aggregate-and-Save","page":"Writing Data","title":"Aggregate and Save","text":"","category":"section"},{"location":"guide/writing/","page":"Writing Data","title":"Writing Data","text":"# Aggregate tick data to 1-minute bars\nusing Dates\n\nminute_bars = Dict{DateTime, Vector{TradeMsg}}()\n\n# Group trades by minute\nforeach_trade(\"ticks.dbn\") do trade\n    bar_time = floor(ts_to_datetime(trade.hd.ts_event), Minute(1))\n    if !haskey(minute_bars, bar_time)\n        minute_bars[bar_time] = TradeMsg[]\n    end\n    push!(minute_bars[bar_time], trade)\nend\n\n# Create OHLCV from each minute\nohlcv_records = OHLCVMsg[]\nfor (bar_time, trades) in sort(collect(minute_bars))\n    prices = [price_to_float(t.price) for t in trades]\n\n    ohlcv = create_ohlcv(\n        prices[1],              # open\n        maximum(prices),        # high\n        minimum(prices),        # low\n        prices[end],            # close\n        sum(t.size for t in trades),  # volume\n        bar_time,\n        trades[1].hd.instrument_id\n    )\n    push!(ohlcv_records, ohlcv)\nend\n\n# Write OHLCV file\n# (create appropriate metadata for OHLCV schema)\nwrite_dbn(\"bars_1m.dbn\", ohlcv_metadata, ohlcv_records)","category":"page"},{"location":"guide/writing/#Performance-Tips","page":"Writing Data","title":"Performance Tips","text":"","category":"section"},{"location":"guide/writing/#1.-Use-Bulk-Writing-When-Possible","page":"Writing Data","title":"1. Use Bulk Writing When Possible","text":"","category":"section"},{"location":"guide/writing/","page":"Writing Data","title":"Writing Data","text":"# ✅ Faster - single write operation\nwrite_dbn(\"output.dbn\", metadata, all_records)\n\n# ❌ Slower - many small writes\nwriter = DBNStreamWriter(\"output.dbn\", \"XNAS\", Schema.TRADES)\nfor record in all_records\n    write_record!(writer, record)\nend\nclose_writer!(writer)","category":"page"},{"location":"guide/writing/#2.-Pre-allocate-for-Building-Records","page":"Writing Data","title":"2. Pre-allocate for Building Records","text":"","category":"section"},{"location":"guide/writing/","page":"Writing Data","title":"Writing Data","text":"# ✅ Pre-allocate if you know size\nrecords = Vector{TradeMsg}(undef, expected_count)\nfor i in 1:expected_count\n    records[i] = create_trade(...)\nend","category":"page"},{"location":"guide/writing/#3.-Use-Compression-for-Storage","page":"Writing Data","title":"3. Use Compression for Storage","text":"","category":"section"},{"location":"guide/writing/","page":"Writing Data","title":"Writing Data","text":"# ✅ 2-3x smaller files\nwrite_dbn(\"output.dbn.zst\", metadata, records)\n\n# ❌ Larger files\nwrite_dbn(\"output.dbn\", metadata, records)","category":"page"},{"location":"guide/writing/#Error-Handling","page":"Writing Data","title":"Error Handling","text":"","category":"section"},{"location":"guide/writing/","page":"Writing Data","title":"Writing Data","text":"using DBN\n\ntry\n    writer = DBNStreamWriter(\"output.dbn\", \"XNAS\", Schema.TRADES)\n    try\n        # Write records...\n        write_record!(writer, record)\n    finally\n        # Always close writer\n        close_writer!(writer)\n    end\ncatch e\n    if e isa SystemError\n        println(\"Cannot write file: $(e.msg)\")\n    else\n        rethrow(e)\n    end\nend","category":"page"},{"location":"guide/writing/#Common-Patterns","page":"Writing Data","title":"Common Patterns","text":"","category":"section"},{"location":"guide/writing/#Batch-Writing-with-Progress","page":"Writing Data","title":"Batch Writing with Progress","text":"","category":"section"},{"location":"guide/writing/","page":"Writing Data","title":"Writing Data","text":"using ProgressMeter\n\nrecords = generate_records(1_000_000)  # Your function\n\n@showprogress \"Writing...\" for i in 1:10\n    batch_start = (i-1) * 100_000 + 1\n    batch_end = i * 100_000\n    batch = records[batch_start:batch_end]\n\n    # Write batch\n    metadata = create_batch_metadata(batch)\n    write_dbn(\"batch_$i.dbn.zst\", metadata, batch)\nend","category":"page"},{"location":"guide/writing/#Merging-Multiple-Files","page":"Writing Data","title":"Merging Multiple Files","text":"","category":"section"},{"location":"guide/writing/","page":"Writing Data","title":"Writing Data","text":"# Read multiple files\nfiles = [\"trades_1.dbn\", \"trades_2.dbn\", \"trades_3.dbn\"]\nall_trades = TradeMsg[]\n\nfor file in files\n    append!(all_trades, read_trades(file))\nend\n\n# Sort by timestamp\nsort!(all_trades, by = t -> t.hd.ts_event)\n\n# Write merged file\nmetadata = create_merged_metadata(all_trades)\nwrite_dbn(\"merged.dbn.zst\", metadata, all_trades)","category":"page"},{"location":"guide/writing/#See-Also","page":"Writing Data","title":"See Also","text":"","category":"section"},{"location":"guide/writing/","page":"Writing Data","title":"Writing Data","text":"Reading Data - How to read DBN files\nStreaming Guide - Detailed streaming information\nAPI Reference - Writing - Complete function reference\nDatabento DBN Format - Format specification","category":"page"},{"location":"api/utilities/#Utilities-API-Reference","page":"Utilities","title":"Utilities API Reference","text":"","category":"section"},{"location":"api/utilities/","page":"Utilities","title":"Utilities","text":"Helper functions for working with DBN data.","category":"page"},{"location":"api/utilities/#Price-Conversions","page":"Utilities","title":"Price Conversions","text":"","category":"section"},{"location":"api/utilities/","page":"Utilities","title":"Utilities","text":"DBN uses fixed-point arithmetic for prices. These functions convert between fixed-point and floating-point representations.","category":"page"},{"location":"api/utilities/#DBN.price_to_float","page":"Utilities","title":"DBN.price_to_float","text":"price_to_float(price::Int64, scale::Int32=FIXED_PRICE_SCALE)\n\nConvert a fixed-point price to floating-point representation.\n\nArguments\n\nprice::Int64: Fixed-point price value\nscale::Int32: Scaling factor (default: FIXEDPRICESCALE)\n\nReturns\n\nFloat64: Floating-point price, or NaN if price is UNDEF_PRICE\n\n\n\n\n\n","category":"function"},{"location":"api/utilities/#DBN.float_to_price","page":"Utilities","title":"DBN.float_to_price","text":"float_to_price(value::Float64, scale::Int32=FIXED_PRICE_SCALE)\n\nConvert a floating-point price to fixed-point representation.\n\nArguments\n\nvalue::Float64: Floating-point price\nscale::Int32: Scaling factor (default: FIXEDPRICESCALE)\n\nReturns\n\nInt64: Fixed-point price, or UNDEF_PRICE if value is NaN or infinite\n\n\n\n\n\n","category":"function"},{"location":"api/utilities/#Usage-Examples","page":"Utilities","title":"Usage Examples","text":"","category":"section"},{"location":"api/utilities/","page":"Utilities","title":"Utilities","text":"using DBN\n\n# Convert DBN fixed-point price to float\nfixed_price = 1005000  # 100.5000 in fixed-point\nfloat_price = price_to_float(fixed_price)  # 100.5\n\n# Convert float to DBN fixed-point\nprice = 100.50\nfixed = float_to_price(price)  # 1005000","category":"page"},{"location":"api/utilities/#Fixed-Point-Scale","page":"Utilities","title":"Fixed-Point Scale","text":"","category":"section"},{"location":"api/utilities/","page":"Utilities","title":"Utilities","text":"DBN prices use a fixed-point scale:","category":"page"},{"location":"api/utilities/","page":"Utilities","title":"Utilities","text":"FIXED_PRICE_SCALE = 10000  # 4 decimal places","category":"page"},{"location":"api/utilities/","page":"Utilities","title":"Utilities","text":"So a price of 1005000 represents 1005000 / 10000 = 100.5000.","category":"page"},{"location":"api/utilities/#Timestamp-Conversions","page":"Utilities","title":"Timestamp Conversions","text":"","category":"section"},{"location":"api/utilities/","page":"Utilities","title":"Utilities","text":"DBN uses nanosecond timestamps (Int64). These functions convert to/from Julia DateTime objects.","category":"page"},{"location":"api/utilities/#DBN.datetime_to_ts","page":"Utilities","title":"DBN.datetime_to_ts","text":"datetime_to_ts(dt::DateTime, nanoseconds::Int32=0)\n\nConvert a DateTime with optional nanosecond precision to nanosecond timestamp.\n\nArguments\n\ndt::DateTime: DateTime to convert\nnanoseconds::Int32: Additional nanoseconds within the second (default: 0)\n\nReturns\n\nInt64: Nanoseconds since Unix epoch\n\n\n\n\n\n","category":"function"},{"location":"api/utilities/#DBN.ts_to_datetime","page":"Utilities","title":"DBN.ts_to_datetime","text":"ts_to_datetime(ts::Int64)\n\nConvert a nanosecond timestamp to DateTime with nanosecond precision information.\n\nArguments\n\nts::Int64: Nanoseconds since Unix epoch\n\nReturns\n\nNamedTuple: Contains datetime (DateTime) and nanoseconds (Int32), or nothing if undefined\n\n\n\n\n\n","category":"function"},{"location":"api/utilities/#DBN.ts_to_date_time","page":"Utilities","title":"DBN.ts_to_date_time","text":"ts_to_date_time(ts::Int64)\n\nConvert a nanosecond timestamp to separate Date and Time components with full nanosecond precision.\n\nArguments\n\nts::Int64: Nanoseconds since Unix epoch\n\nReturns\n\nNamedTuple: Contains date (Date), time (Time), and timestamp (DBNTimestamp), or nothing if undefined\n\n\n\n\n\n","category":"function"},{"location":"api/utilities/#DBN.date_time_to_ts","page":"Utilities","title":"DBN.date_time_to_ts","text":"date_time_to_ts(date::Date, time::Dates.Time)\n\nConvert separate Date and Time components to nanosecond timestamp.\n\nArguments\n\ndate::Date: Date component\ntime::Dates.Time: Time component with nanosecond precision\n\nReturns\n\nInt64: Nanoseconds since Unix epoch\n\n\n\n\n\n","category":"function"},{"location":"api/utilities/#DBN.to_nanoseconds","page":"Utilities","title":"DBN.to_nanoseconds","text":"to_nanoseconds(ts::DBNTimestamp)\n\nConvert a DBNTimestamp back to nanoseconds since Unix epoch.\n\nArguments\n\nts::DBNTimestamp: Timestamp to convert\n\nReturns\n\nInt64: Nanoseconds since Unix epoch, or UNDEF_TIMESTAMP if undefined\n\n\n\n\n\n","category":"function"},{"location":"api/utilities/#Usage-Examples-2","page":"Utilities","title":"Usage Examples","text":"","category":"section"},{"location":"api/utilities/","page":"Utilities","title":"Utilities","text":"using DBN, Dates\n\n# DateTime to nanoseconds\ndt = DateTime(2024, 1, 1, 9, 30, 0)\nts = datetime_to_ts(dt)  # Nanoseconds since Unix epoch\n\n# Nanoseconds to DateTime\ntimestamp = 1704067200000000000\ndt = ts_to_datetime(timestamp)  # DateTime(2024, 1, 1, 0, 0, 0)\n\n# Format timestamp\nformatted = Dates.format(ts_to_datetime(timestamp), \"yyyy-mm-dd HH:MM:SS\")","category":"page"},{"location":"api/utilities/#Timestamp-Precision","page":"Utilities","title":"Timestamp Precision","text":"","category":"section"},{"location":"api/utilities/","page":"Utilities","title":"Utilities","text":"DBN timestamps are in nanoseconds since Unix epoch (1970-01-01 00:00:00 UTC):","category":"page"},{"location":"api/utilities/","page":"Utilities","title":"Utilities","text":"ts::Int64 = 1704067200000000000\n# └─ nanoseconds since 1970-01-01","category":"page"},{"location":"api/utilities/","page":"Utilities","title":"Utilities","text":"Julia DateTime has millisecond precision, so nanosecond timestamps are truncated when converting.","category":"page"},{"location":"api/utilities/#Other-Utilities","page":"Utilities","title":"Other Utilities","text":"","category":"section"},{"location":"api/utilities/#DBN.record_length_bytes","page":"Utilities","title":"DBN.record_length_bytes","text":"record_length_bytes(hd::RecordHeader)\n\nGet the actual record length in bytes from a RecordHeader. The length field stores 4-byte units, so multiply by LENGTH_MULTIPLIER.\n\n\n\n\n\n","category":"function"},{"location":"api/utilities/#Constants","page":"Utilities","title":"Constants","text":"","category":"section"},{"location":"api/utilities/#Price-Constants","page":"Utilities","title":"Price Constants","text":"","category":"section"},{"location":"api/utilities/","page":"Utilities","title":"Utilities","text":"FIXED_PRICE_SCALE::Int64 = 10000  # Scale factor for fixed-point prices\nUNDEF_PRICE::Int64        # Undefined price sentinel value","category":"page"},{"location":"api/utilities/#Size-Constants","page":"Utilities","title":"Size Constants","text":"","category":"section"},{"location":"api/utilities/","page":"Utilities","title":"Utilities","text":"UNDEF_ORDER_SIZE::UInt32  # Undefined size sentinel value","category":"page"},{"location":"api/utilities/#Timestamp-Constants","page":"Utilities","title":"Timestamp Constants","text":"","category":"section"},{"location":"api/utilities/","page":"Utilities","title":"Utilities","text":"UNDEF_TIMESTAMP::UInt64   # Undefined timestamp sentinel value","category":"page"},{"location":"api/utilities/#Version","page":"Utilities","title":"Version","text":"","category":"section"},{"location":"api/utilities/","page":"Utilities","title":"Utilities","text":"DBN_VERSION::UInt8 = 3    # Supported DBN version","category":"page"},{"location":"api/utilities/#Working-with-Sentinel-Values","page":"Utilities","title":"Working with Sentinel Values","text":"","category":"section"},{"location":"api/utilities/","page":"Utilities","title":"Utilities","text":"DBN uses special sentinel values to indicate undefined/missing data:","category":"page"},{"location":"api/utilities/","page":"Utilities","title":"Utilities","text":"using DBN\n\n# Check for undefined price\nif trade.price == UNDEF_PRICE\n    println(\"Price not available\")\nend\n\n# Check for undefined timestamp\nif record.ts_recv == UNDEF_TIMESTAMP\n    println(\"Receive timestamp not available\")\nend\n\n# Check for undefined size\nif order.size == UNDEF_ORDER_SIZE\n    println(\"Size not specified\")\nend","category":"page"},{"location":"api/utilities/#See-Also","page":"Utilities","title":"See Also","text":"","category":"section"},{"location":"api/utilities/","page":"Utilities","title":"Utilities","text":"Types - Message type reference\nConversion Guide - Format conversion guide\nDatabento Documentation - Format specifications","category":"page"},{"location":"api/streaming/#Streaming-API-Reference","page":"Streaming","title":"Streaming API Reference","text":"","category":"section"},{"location":"api/streaming/","page":"Streaming","title":"Streaming","text":"Functions for streaming DBN files with minimal memory usage.","category":"page"},{"location":"api/streaming/#Iterator-Pattern","page":"Streaming","title":"Iterator Pattern","text":"","category":"section"},{"location":"api/streaming/#DBN.DBNStream","page":"Streaming","title":"DBN.DBNStream","text":"DBNStream\n\nIterator for streaming DBN file reading with automatic compression support.\n\nFields\n\ndecoder::DBNDecoder: Decoder instance (stored to avoid allocation overhead)\ncleanup::Ref{Bool}: Flag to track if cleanup has been done\n\nUsage\n\nfor record in DBNStream(\"data.dbn\")\n    println(typeof(record))\nend\n\nDetails\n\nProvides memory-efficient streaming access to DBN files without loading the entire file into memory. Automatically detects and handles Zstd compression. Gracefully skips unknown record types.\n\n\n\n\n\n","category":"type"},{"location":"api/streaming/#Generic-Callback","page":"Streaming","title":"Generic Callback","text":"","category":"section"},{"location":"api/streaming/#DBN.foreach_record","page":"Streaming","title":"DBN.foreach_record","text":"foreach_record(f::Function, filename::String, ::Type{T}) where T\n\nHighly optimized callback-based streaming with minimal allocations.\n\nArguments\n\nf::Function: Callback function that processes each record\nfilename::String: Path to DBN file\n::Type{T}: Record type (e.g., TradeMsg)\n\nPerformance\n\nAchieves near-zero allocations (typically <50 total allocations for any size file) when the callback uses Ref for mutable state. The Julia compiler optimizes away most per-record allocations, making this significantly faster than iterator-based streaming for pure processing workloads.\n\nPerformance tip: Use Ref for mutable state!\n\nTo achieve true near-zero allocations, use Ref for any mutable state in your callback instead of plain variables:\n\n# ✅ GOOD: Only ~44 allocations total (not per record!)\ntotal = Ref(0.0)\nforeach_record(\"trades.dbn\", TradeMsg) do trade\n    total[] += price_to_float(trade.price)\nend\nprintln(total[])\n\n# ❌ SLOWER: May allocate per record due to closure overhead\ntotal = 0.0\nforeach_record(\"trades.dbn\", TradeMsg) do trade\n    total += price_to_float(trade.price)  # Closure capture causes allocations\nend\n\nMore examples\n\n# Count records by side (using Ref for mutable Dict)\ncounts = Ref(Dict('A' => 0, 'B' => 0))\nforeach_record(\"trades.dbn\", TradeMsg) do trade\n    counts[][Char(trade.side)] += 1\nend\n\n# Collect records (push! automatically copies bitstypes)\ntrades = TradeMsg[]\nsizehint!(trades, 100_000)\nforeach_record(\"trades.dbn\", TradeMsg) do trade\n    push!(trades, trade)  # Safe: TradeMsg is copied\nend\n\n# Filter while streaming - only store what you need\nhigh_volume = TradeMsg[]\nforeach_record(\"trades.dbn\", TradeMsg) do trade\n    if trade.size > 1000\n        push!(high_volume, trade)\n    end\nend\n\nNote on bitstypes\n\nAll DBN message types are immutable bitstypes, so push!(array, record) automatically makes a value copy. You can safely store records in arrays without explicit copying.\n\n\n\n\n\n","category":"function"},{"location":"api/streaming/#Type-Specific-Callbacks","page":"Streaming","title":"Type-Specific Callbacks","text":"","category":"section"},{"location":"api/streaming/","page":"Streaming","title":"Streaming","text":"Callback functions provide the highest performance (up to 40M records/sec) with near-zero memory allocation.","category":"page"},{"location":"api/streaming/#Trade-Data","page":"Streaming","title":"Trade Data","text":"","category":"section"},{"location":"api/streaming/#DBN.foreach_trade","page":"Streaming","title":"DBN.foreach_trade","text":"foreach_trade(f::Function, filename::String)\n\nNear-zero-allocation streaming of trade data using callback pattern. See foreach_record for usage and performance tips.\n\n\n\n\n\n","category":"function"},{"location":"api/streaming/#Market-by-Order-(MBO)","page":"Streaming","title":"Market-by-Order (MBO)","text":"","category":"section"},{"location":"api/streaming/#DBN.foreach_mbo","page":"Streaming","title":"DBN.foreach_mbo","text":"foreach_mbo(f::Function, filename::String)\n\nNear-zero-allocation streaming of MBO data using callback pattern. See foreach_record for usage and performance tips.\n\n\n\n\n\n","category":"function"},{"location":"api/streaming/#Market-by-Price-(MBP)","page":"Streaming","title":"Market-by-Price (MBP)","text":"","category":"section"},{"location":"api/streaming/#DBN.foreach_mbp1","page":"Streaming","title":"DBN.foreach_mbp1","text":"foreach_mbp1(f::Function, filename::String)\n\nNear-zero-allocation streaming of MBP-1 (top-of-book) data using callback pattern. See foreach_record for usage and performance tips.\n\n\n\n\n\n","category":"function"},{"location":"api/streaming/#DBN.foreach_mbp10","page":"Streaming","title":"DBN.foreach_mbp10","text":"foreach_mbp10(f::Function, filename::String)\n\nNear-zero-allocation streaming of MBP-10 (10-level depth) data using callback pattern. See foreach_record for usage and performance tips.\n\n\n\n\n\n","category":"function"},{"location":"api/streaming/#Top-of-Book-(BBO/TBBO)","page":"Streaming","title":"Top of Book (BBO/TBBO)","text":"","category":"section"},{"location":"api/streaming/#DBN.foreach_tbbo","page":"Streaming","title":"DBN.foreach_tbbo","text":"foreach_tbbo(f::Function, filename::String)\n\nNear-zero-allocation streaming of TBBO (Trade BBO) data using callback pattern. Uses MBP-1 records. See foreach_record for usage and performance tips.\n\n\n\n\n\n","category":"function"},{"location":"api/streaming/#DBN.foreach_bbo1s","page":"Streaming","title":"DBN.foreach_bbo1s","text":"foreach_bbo1s(f::Function, filename::String)\n\nNear-zero-allocation streaming of BBO 1-second data using callback pattern. See foreach_record for usage and performance tips.\n\n\n\n\n\n","category":"function"},{"location":"api/streaming/#DBN.foreach_bbo1m","page":"Streaming","title":"DBN.foreach_bbo1m","text":"foreach_bbo1m(f::Function, filename::String)\n\nNear-zero-allocation streaming of BBO 1-minute data using callback pattern. See foreach_record for usage and performance tips.\n\n\n\n\n\n","category":"function"},{"location":"api/streaming/#OHLCV-(Bars)","page":"Streaming","title":"OHLCV (Bars)","text":"","category":"section"},{"location":"api/streaming/#DBN.foreach_ohlcv","page":"Streaming","title":"DBN.foreach_ohlcv","text":"foreach_ohlcv(f::Function, filename::String)\n\nNear-zero-allocation streaming of OHLCV (candlestick) data using callback pattern. See foreach_record for usage and performance tips.\n\n\n\n\n\n","category":"function"},{"location":"api/streaming/#DBN.foreach_ohlcv_1s","page":"Streaming","title":"DBN.foreach_ohlcv_1s","text":"foreach_ohlcv_1s(f::Function, filename::String)\n\nNear-zero-allocation streaming of 1-second OHLCV data using callback pattern. See foreach_record for usage and performance tips.\n\n\n\n\n\n","category":"function"},{"location":"api/streaming/#DBN.foreach_ohlcv_1m","page":"Streaming","title":"DBN.foreach_ohlcv_1m","text":"foreach_ohlcv_1m(f::Function, filename::String)\n\nNear-zero-allocation streaming of 1-minute OHLCV data using callback pattern. See foreach_record for usage and performance tips.\n\n\n\n\n\n","category":"function"},{"location":"api/streaming/#DBN.foreach_ohlcv_1h","page":"Streaming","title":"DBN.foreach_ohlcv_1h","text":"foreach_ohlcv_1h(f::Function, filename::String)\n\nNear-zero-allocation streaming of 1-hour OHLCV data using callback pattern. See foreach_record for usage and performance tips.\n\n\n\n\n\n","category":"function"},{"location":"api/streaming/#DBN.foreach_ohlcv_1d","page":"Streaming","title":"DBN.foreach_ohlcv_1d","text":"foreach_ohlcv_1d(f::Function, filename::String)\n\nNear-zero-allocation streaming of 1-day OHLCV data using callback pattern. See foreach_record for usage and performance tips.\n\n\n\n\n\n","category":"function"},{"location":"api/streaming/#Consolidated-Market-Data","page":"Streaming","title":"Consolidated Market Data","text":"","category":"section"},{"location":"api/streaming/#DBN.foreach_cmbp1","page":"Streaming","title":"DBN.foreach_cmbp1","text":"foreach_cmbp1(f::Function, filename::String)\n\nNear-zero-allocation streaming of Consolidated MBP-1 data using callback pattern. See foreach_record for usage and performance tips.\n\n\n\n\n\n","category":"function"},{"location":"api/streaming/#DBN.foreach_cbbo1s","page":"Streaming","title":"DBN.foreach_cbbo1s","text":"foreach_cbbo1s(f::Function, filename::String)\n\nNear-zero-allocation streaming of Consolidated BBO 1-second data using callback pattern. See foreach_record for usage and performance tips.\n\n\n\n\n\n","category":"function"},{"location":"api/streaming/#DBN.foreach_cbbo1m","page":"Streaming","title":"DBN.foreach_cbbo1m","text":"foreach_cbbo1m(f::Function, filename::String)\n\nNear-zero-allocation streaming of Consolidated BBO 1-minute data using callback pattern. See foreach_record for usage and performance tips.\n\n\n\n\n\n","category":"function"},{"location":"api/streaming/#DBN.foreach_tcbbo","page":"Streaming","title":"DBN.foreach_tcbbo","text":"foreach_tcbbo(f::Function, filename::String)\n\nNear-zero-allocation streaming of Top Consolidated BBO data using callback pattern. See foreach_record for usage and performance tips.\n\n\n\n\n\n","category":"function"},{"location":"api/streaming/#Performance-Characteristics","page":"Streaming","title":"Performance Characteristics","text":"","category":"section"},{"location":"api/streaming/","page":"Streaming","title":"Streaming","text":"Method Throughput Memory Use Case\nCallback (foreach_*) Up to 40M rec/sec Minimal (KB) Processing, aggregation\nIterator (DBNStream) ~10M rec/sec Moderate (MB) Flexible iteration","category":"page"},{"location":"api/streaming/#Usage-Patterns","page":"Streaming","title":"Usage Patterns","text":"","category":"section"},{"location":"api/streaming/#Callback-Pattern-(Fastest)","page":"Streaming","title":"Callback Pattern (Fastest)","text":"","category":"section"},{"location":"api/streaming/","page":"Streaming","title":"Streaming","text":"# Aggregate data\ntotal = Ref(0)\nforeach_trade(\"file.dbn\") do trade\n    total[] += trade.size\nend","category":"page"},{"location":"api/streaming/","page":"Streaming","title":"Streaming","text":"Limitations: Cannot break early from callback","category":"page"},{"location":"api/streaming/#Iterator-Pattern-(Most-Flexible)","page":"Streaming","title":"Iterator Pattern (Most Flexible)","text":"","category":"section"},{"location":"api/streaming/","page":"Streaming","title":"Streaming","text":"# Can break early\nfor trade in DBNStream(\"file.dbn\")\n    if condition(trade)\n        break\n    end\nend","category":"page"},{"location":"api/streaming/","page":"Streaming","title":"Streaming","text":"See the Streaming Guide for detailed examples and performance tips.","category":"page"},{"location":"api/enums/#Enums-API-Reference","page":"Enums","title":"Enums API Reference","text":"","category":"section"},{"location":"api/enums/","page":"Enums","title":"Enums","text":"Enumeration types used throughout DBN.jl.","category":"page"},{"location":"api/enums/#Schema-Types","page":"Enums","title":"Schema Types","text":"","category":"section"},{"location":"api/enums/#DBN.Schema","page":"Enums","title":"DBN.Schema","text":"Schema\n\nDBN data schemas representing different types of market data.\n\nValues\n\nMBO: Market-by-order data\nMBP_1: Market-by-price with book depth 1 (TBBO)\nMBP_10: Market-by-price with book depth 10\nTBBO: Top-of-book bid/offer\nTRADES: Trade messages only\nOHLCV_1S: OHLCV data at 1-second intervals\nOHLCV_1M: OHLCV data at 1-minute intervals\nOHLCV_1H: OHLCV data at 1-hour intervals\nOHLCV_1D: OHLCV data at 1-day intervals\nDEFINITION: Instrument definition data\nSTATISTICS: Market statistics\nSTATUS: Exchange status messages\nIMBALANCE: Order imbalance data\nCBBO: Consolidated best bid/offer\nCBBO_1S: Consolidated BBO at 1-second intervals\nCBBO_1M: Consolidated BBO at 1-minute intervals\nCMBP_1: Consolidated market-by-price depth 1\nTCBBO: Trade-consolidated BBO\nBBO_1S: BBO at 1-second intervals\nBBO_1M: BBO at 1-minute intervals\n\n\n\n\n\n","category":"module"},{"location":"api/enums/#Available-Schemas","page":"Enums","title":"Available Schemas","text":"","category":"section"},{"location":"api/enums/","page":"Enums","title":"Enums","text":"The Schema enum defines the available data schemas:","category":"page"},{"location":"api/enums/","page":"Enums","title":"Enums","text":"MBO - Market-by-order\nMBP_1 - Market-by-price (top of book)\nMBP_10 - Market-by-price (10 levels)\nTBBO - Top-of-book BBO\nTRADES - Trade messages\nOHLCV_1S, OHLCV_1M, OHLCV_1H, OHLCV_1D - OHLCV bars at different intervals\nSTATUS - Status messages\nIMBALANCE - Imbalance messages\nAnd more...","category":"page"},{"location":"api/enums/","page":"Enums","title":"Enums","text":"For complete schema details, see Databento Schemas Documentation.","category":"page"},{"location":"api/enums/#Record-Types","page":"Enums","title":"Record Types","text":"","category":"section"},{"location":"api/enums/#DBN.RType","page":"Enums","title":"DBN.RType","text":"RType\n\nRecord types for different kinds of market data messages in DBN format.\n\nValues\n\nMBP_0_MSG: Trades (book depth 0)\nMBP_1_MSG: TBBO/MBP-1 (book depth 1)\nMBP_10_MSG: MBP-10 (book depth 10)\nSTATUS_MSG: Exchange status record\nINSTRUMENT_DEF_MSG: Instrument definition record\nIMBALANCE_MSG: Order imbalance record\nERROR_MSG: Error record from live gateway\nSYMBOL_MAPPING_MSG: Symbol mapping record from live gateway\nSYSTEM_MSG: Non-error record from live gateway\nSTAT_MSG: Statistics record from publisher\nOHLCV_1S_MSG: OHLCV at 1-second cadence\nOHLCV_1M_MSG: OHLCV at 1-minute cadence\nOHLCV_1H_MSG: OHLCV at hourly cadence\nOHLCV_1D_MSG: OHLCV at daily cadence\nMBO_MSG: Market-by-order record\nCMBP_1_MSG: Consolidated market-by-price with book depth 1\nCBBO_1S_MSG: Consolidated market-by-price with book depth 1 at 1-second cadence\nCBBO_1M_MSG: Consolidated market-by-price with book depth 1 at 1-minute cadence\nTCBBO_MSG: Consolidated market-by-price with book depth 1 (trades only)\nBBO_1S_MSG: Market-by-price with book depth 1 at 1-second cadence\nBBO_1M_MSG: Market-by-price with book depth 1 at 1-minute cadence\n\n\n\n\n\n","category":"module"},{"location":"api/enums/","page":"Enums","title":"Enums","text":"Record types identify the message type in the binary format. Common values:","category":"page"},{"location":"api/enums/","page":"Enums","title":"Enums","text":"MBO_MSG - Market-by-order message\nTRADE_MSG - Trade message\nMBP_0_MSG - MBP level 0 (trades)\nMBP_1_MSG - MBP level 1\nMBP_10_MSG - MBP level 10\nOHLCV_1M_MSG - 1-minute OHLCV\nAnd more...","category":"page"},{"location":"api/enums/#Symbol-Types","page":"Enums","title":"Symbol Types","text":"","category":"section"},{"location":"api/enums/#DBN.SType","page":"Enums","title":"DBN.SType","text":"SType\n\nSymbol types for identifying instruments in DBN data.\n\nValues\n\nINSTRUMENT_ID: Numeric instrument identifier\nRAW_SYMBOL: Raw symbol string from exchange\nCONTINUOUS: Continuous contract symbol\nPARENT: Parent symbol for derived instruments\n\n\n\n\n\n","category":"module"},{"location":"api/enums/","page":"Enums","title":"Enums","text":"Symbol types specify how instruments are identified:","category":"page"},{"location":"api/enums/","page":"Enums","title":"Enums","text":"RAW_SYMBOL - Raw symbol string\nINSTRUMENT_ID - Numeric instrument ID\nPARENT - Parent instrument\nAnd more...","category":"page"},{"location":"api/enums/#Action-Types","page":"Enums","title":"Action Types","text":"","category":"section"},{"location":"api/enums/#DBN.Action","page":"Enums","title":"DBN.Action","text":"Action\n\nMarket actions that can be applied to orders or trades.\n\nValues\n\nADD: Insert a new order into the book\nMODIFY: Change an order's price and/or size\nCANCEL: Fully or partially cancel an order from the book\nCLEAR: Remove all resting orders for the instrument\nTRADE: An aggressing order traded. Does not affect the book\nFILL: A resting order was filled. Does not affect the book\nNONE: No action: does not affect the book, but may carry flags or other information\n\n\n\n\n\n","category":"module"},{"location":"api/enums/","page":"Enums","title":"Enums","text":"Action types for order and trade messages:","category":"page"},{"location":"api/enums/","page":"Enums","title":"Enums","text":"ADD - Order added to book\nMODIFY - Order modified\nCANCEL - Order cancelled\nTRADE - Trade execution\nCLEAR - Order cleared\nAnd more...","category":"page"},{"location":"api/enums/#Side-Types","page":"Enums","title":"Side Types","text":"","category":"section"},{"location":"api/enums/#DBN.Side","page":"Enums","title":"DBN.Side","text":"Side\n\nMarket sides for orders and trades.\n\nValues\n\nASK: Ask/offer side (sell orders)\nBID: Bid side (buy orders)\nNONE: No specific side or not applicable\n\n\n\n\n\n","category":"module"},{"location":"api/enums/","page":"Enums","title":"Enums","text":"Side of market:","category":"page"},{"location":"api/enums/","page":"Enums","title":"Enums","text":"BID - Buy side\nASK - Sell side\nNONE - No side specified","category":"page"},{"location":"api/enums/#Compression-Types","page":"Enums","title":"Compression Types","text":"","category":"section"},{"location":"api/enums/#DBN.Compression","page":"Enums","title":"DBN.Compression","text":"Compression\n\nCompression algorithms supported for DBN files.\n\nValues\n\nNONE: No compression\nZSTD: Zstandard compression\n\n\n\n\n\n","category":"module"},{"location":"api/enums/","page":"Enums","title":"Enums","text":"Compression formats:","category":"page"},{"location":"api/enums/","page":"Enums","title":"Enums","text":"NONE - No compression\nZSTD - Zstandard compression","category":"page"},{"location":"api/enums/#Encoding-Types","page":"Enums","title":"Encoding Types","text":"","category":"section"},{"location":"api/enums/#DBN.Encoding","page":"Enums","title":"DBN.Encoding","text":"Encoding\n\nOutput encoding formats for market data.\n\nValues\n\nDBN: Databento Binary Encoding\nCSV: Comma-separated values\nJSON: JavaScript Object Notation\n\n\n\n\n\n","category":"module"},{"location":"api/enums/","page":"Enums","title":"Enums","text":"File encoding formats:","category":"page"},{"location":"api/enums/","page":"Enums","title":"Enums","text":"DBN - Databento Binary Encoding\nCSV - Comma-separated values\nJSON - JSON format","category":"page"},{"location":"api/enums/#Instrument-Class","page":"Enums","title":"Instrument Class","text":"","category":"section"},{"location":"api/enums/#DBN.InstrumentClass","page":"Enums","title":"DBN.InstrumentClass","text":"InstrumentClass\n\nClassification of financial instruments.\n\nValues\n\nSTOCK: Equity instruments\nOPTION: Option contracts\nFUTURE: Futures contracts\nFX: Foreign exchange\nBOND: Fixed income securities\nMIXED_SPREAD: Mixed spread instruments\nCOMMODITY: Commodity instruments\nINDEX: Index instruments\nCURRENCY: Currency instruments\nSWAP: Swap instruments\nOTHER: Other/unknown instrument types\nUNKNOWN_0, UNKNOWN_45: Numeric fallback values for unknown classes\n\n\n\n\n\n","category":"module"},{"location":"api/enums/","page":"Enums","title":"Enums","text":"Instrument classification:","category":"page"},{"location":"api/enums/","page":"Enums","title":"Enums","text":"STOCK - Equity\nFUTURE - Futures contract\nOPTION - Options contract\nFX_SPOT - Foreign exchange spot\nAnd more...","category":"page"},{"location":"api/enums/#Usage-Examples","page":"Enums","title":"Usage Examples","text":"","category":"section"},{"location":"api/enums/#Working-with-Schemas","page":"Enums","title":"Working with Schemas","text":"","category":"section"},{"location":"api/enums/","page":"Enums","title":"Enums","text":"using DBN\n\n# Check schema type\nif metadata.schema == Schema.TRADES\n    trades = read_trades(filename)\nend\n\n# Schema to string\nschema_name = string(Schema.TRADES)  # \"TRADES\"","category":"page"},{"location":"api/enums/#Working-with-Actions","page":"Enums","title":"Working with Actions","text":"","category":"section"},{"location":"api/enums/","page":"Enums","title":"Enums","text":"# Filter by action\nforeach_mbo(\"file.dbn\") do mbo\n    if mbo.action == Action.ADD\n        # Handle new order\n    elseif mbo.action == Action.CANCEL\n        # Handle cancellation\n    end\nend","category":"page"},{"location":"api/enums/#Working-with-Sides","page":"Enums","title":"Working with Sides","text":"","category":"section"},{"location":"api/enums/","page":"Enums","title":"Enums","text":"# Count by side\nbid_count = 0\nask_count = 0\n\nforeach_trade(\"file.dbn\") do trade\n    if trade.side == Side.BID\n        bid_count += 1\n    else\n        ask_count += 1\n    end\nend","category":"page"},{"location":"api/enums/#See-Also","page":"Enums","title":"See Also","text":"","category":"section"},{"location":"api/enums/","page":"Enums","title":"Enums","text":"Types - Message type reference\nDatabento Schema Documentation - Schema specifications","category":"page"},{"location":"api/types/#Types-API-Reference","page":"Types","title":"Types API Reference","text":"","category":"section"},{"location":"api/types/","page":"Types","title":"Types","text":"DBN message types and supporting structures.","category":"page"},{"location":"api/types/#Core-Types","page":"Types","title":"Core Types","text":"","category":"section"},{"location":"api/types/#DBN.DBNDecoder","page":"Types","title":"DBN.DBNDecoder","text":"DBNDecoder\n\nDecoder for reading DBN (Databento Binary Encoding) files with support for compression.\n\nFields\n\nio::IO: Current IO stream (may be wrapped with compression)\nbase_io::IO: Original IO stream before any compression wrapper\nheader::Union{DBNHeader,Nothing}: Parsed DBN header information\nmetadata::Union{Metadata,Nothing}: Parsed metadata information\nupgrade_policy::UInt8: Version upgrade policy\n\n\n\n\n\n","category":"type"},{"location":"api/types/#DBN.DBNEncoder","page":"Types","title":"DBN.DBNEncoder","text":"DBNEncoder\n\nEncoder for writing DBN (Databento Binary Encoding) files with optional compression.\n\nFields\n\nio::IO: Current IO stream (may be wrapped with compression)\nbase_io::IO: Original IO stream before any compression wrapper\nmetadata::Metadata: Metadata for the DBN file\ncompressed_buffer::Union{IOBuffer,Nothing}: Buffer for compressed data (if applicable)\n\n\n\n\n\n","category":"type"},{"location":"api/types/#DBN.Metadata","page":"Types","title":"DBN.Metadata","text":"Metadata\n\nMetadata information for a DBN dataset.\n\nFields\n\nversion::UInt8: DBN format version\ndataset::String: Dataset identifier\nschema::Schema.T: Data schema type\nstart_ts::Int64: Start timestamp for the data\nend_ts::Union{Int64,Nothing}: End timestamp (can be null)\nlimit::Union{UInt64,Nothing}: Record count limit (can be null)\nstype_in::Union{SType.T,Nothing}: Input symbol type (can be null)\nstype_out::SType.T: Output symbol type\nts_out::Bool: Whether timestamps are included in output\nsymbols::Vector{String}: List of symbols in the dataset\npartial::Vector{String}: Partially available symbols\nnot_found::Vector{String}: Symbols that were not found\nmappings::Vector{Tuple{String,String,Int64,Int64}}: Symbol mappings with time ranges\n\n\n\n\n\n","category":"type"},{"location":"api/types/#DBN.DBNHeader","page":"Types","title":"DBN.DBNHeader","text":"DBNHeader\n\nComplete header information for a DBN file.\n\nFields\n\nversion_upgrade_policy::VersionUpgradePolicy: Version handling policy\ndataset_condition::DatasetCondition: Dataset conditions and constraints\nmetadata::Metadata: Dataset metadata\n\n\n\n\n\n","category":"type"},{"location":"api/types/#DBN.RecordHeader","page":"Types","title":"DBN.RecordHeader","text":"RecordHeader\n\nStandard header present in all DBN record types.\n\nFields\n\nlength::UInt8: Length of the record in 4-byte units (multiply by LENGTH_MULTIPLIER for bytes)\nrtype::RType.T: Record type identifier\npublisher_id::UInt16: Publisher/venue identifier\ninstrument_id::UInt32: Instrument identifier\nts_event::Int64: Event timestamp in nanoseconds since Unix epoch\n\n\n\n\n\n","category":"type"},{"location":"api/types/#DBN.DBNTimestamp","page":"Types","title":"DBN.DBNTimestamp","text":"DBNTimestamp\n\nHigh-precision timestamp representation with nanosecond accuracy.\n\nFields\n\nseconds::Int64: Unix epoch seconds\nnanoseconds::Int32: Nanoseconds within the second (0-999999999)\n\n\n\n\n\n","category":"type"},{"location":"api/types/#Trade-Messages","page":"Types","title":"Trade Messages","text":"","category":"section"},{"location":"api/types/#DBN.TradeMsg","page":"Types","title":"DBN.TradeMsg","text":"TradeMsg\n\nTrade execution message.\n\nFields\n\nhd::RecordHeader: Standard record header\nprice::Int64: Trade price (scaled by FIXEDPRICESCALE)\nsize::UInt32: Trade size/quantity\naction::Action.T: Trade action\nside::Side.T: Aggressor side\nflags::UInt8: Trade flags\ndepth::UInt8: Book depth\nts_recv::Int64: Timestamp when message was received\nts_in_delta::Int32: Delta from ts_event to gateway ingestion\nsequence::UInt32: Message sequence number\n\n\n\n\n\n","category":"type"},{"location":"api/types/#Market-by-Order-Messages","page":"Types","title":"Market-by-Order Messages","text":"","category":"section"},{"location":"api/types/#DBN.MBOMsg","page":"Types","title":"DBN.MBOMsg","text":"MBOMsg\n\nMarket-by-order message containing individual order information.\n\nFields\n\nhd::RecordHeader: Standard record header\norder_id::UInt64: Unique order identifier\nprice::Int64: Order price (scaled by FIXEDPRICESCALE)\nsize::UInt32: Order size/quantity\nflags::UInt8: Order flags\nchannel_id::UInt8: Channel identifier\naction::Action.T: Order action (ADD, MODIFY, CANCEL, etc.)\nside::Side.T: Order side (BID or ASK)\nts_recv::Int64: Timestamp when message was received\nts_in_delta::Int32: Delta from ts_event to gateway ingestion\nsequence::UInt32: Message sequence number\n\n\n\n\n\n","category":"type"},{"location":"api/types/#Market-by-Price-Messages","page":"Types","title":"Market-by-Price Messages","text":"","category":"section"},{"location":"api/types/#DBN.MBP1Msg","page":"Types","title":"DBN.MBP1Msg","text":"MBP1Msg\n\nMarket-by-price message with book depth 1 (top-of-book).\n\nFields\n\nhd::RecordHeader: Standard record header\nprice::Int64: Price level (scaled by FIXEDPRICESCALE)\nsize::UInt32: Size at this price level\naction::Action.T: Price level action\nside::Side.T: Price level side\nflags::UInt8: Message flags\ndepth::UInt8: Book depth (always 1)\nts_recv::Int64: Timestamp when message was received\nts_in_delta::Int32: Delta from ts_event to gateway ingestion\nsequence::UInt32: Message sequence number\nlevels::BidAskPair: Best bid and ask information\n\n\n\n\n\n","category":"type"},{"location":"api/types/#DBN.MBP10Msg","page":"Types","title":"DBN.MBP10Msg","text":"MBP10Msg\n\nMarket-by-price message with book depth 10.\n\nFields\n\nhd::RecordHeader: Standard record header\nprice::Int64: Price level (scaled by FIXEDPRICESCALE)\nsize::UInt32: Size at this price level\naction::Action.T: Price level action\nside::Side.T: Price level side\nflags::UInt8: Message flags\ndepth::UInt8: Book depth (up to 10)\nts_recv::Int64: Timestamp when message was received\nts_in_delta::Int32: Delta from ts_event to gateway ingestion\nsequence::UInt32: Message sequence number\nlevels::NTuple{10,BidAskPair}: Up to 10 levels of bid/ask information\n\n\n\n\n\n","category":"type"},{"location":"api/types/#DBN.BidAskPair","page":"Types","title":"DBN.BidAskPair","text":"BidAskPair\n\nBid and ask price/size information for market data.\n\nFields\n\nbid_px::Int64: Bid price (scaled by FIXEDPRICESCALE)\nask_px::Int64: Ask price (scaled by FIXEDPRICESCALE)\nbid_sz::UInt32: Bid size/quantity\nask_sz::UInt32: Ask size/quantity\nbid_ct::UInt32: Number of bid orders\nask_ct::UInt32: Number of ask orders\n\n\n\n\n\n","category":"type"},{"location":"api/types/#OHLCV-Messages","page":"Types","title":"OHLCV Messages","text":"","category":"section"},{"location":"api/types/#DBN.OHLCVMsg","page":"Types","title":"DBN.OHLCVMsg","text":"OHLCVMsg\n\nOpen, High, Low, Close, Volume (OHLCV) aggregated data message.\n\nFields\n\nhd::RecordHeader: Standard record header\nopen::Int64: Opening price (scaled by FIXEDPRICESCALE)\nhigh::Int64: Highest price (scaled by FIXEDPRICESCALE)\nlow::Int64: Lowest price (scaled by FIXEDPRICESCALE)\nclose::Int64: Closing price (scaled by FIXEDPRICESCALE)\nvolume::UInt64: Total volume traded\n\n\n\n\n\n","category":"type"},{"location":"api/types/#Consolidated-Market-Data","page":"Types","title":"Consolidated Market Data","text":"","category":"section"},{"location":"api/types/#DBN.CMBP1Msg","page":"Types","title":"DBN.CMBP1Msg","text":"CMBP1Msg\n\nConsolidated market-by-price message with book depth 1.\n\nFields\n\nhd::RecordHeader: Standard record header\nprice::Int64: Price level (scaled by FIXEDPRICESCALE)\nsize::UInt32: Size at this price level\naction::Action.T: Price level action\nside::Side.T: Price level side\nflags::UInt8: Message flags\ndepth::UInt8: Book depth (always 1)\nts_recv::Int64: Timestamp when message was received\nts_in_delta::Int32: Delta from ts_event to gateway ingestion\nsequence::UInt32: Message sequence number\nlevels::BidAskPair: Consolidated best bid and ask information\n\n\n\n\n\n","category":"type"},{"location":"api/types/#DBN.CBBO1sMsg","page":"Types","title":"DBN.CBBO1sMsg","text":"CBBO1sMsg\n\nConsolidated best bid/offer message at 1-second intervals.\n\nFields\n\nhd::RecordHeader: Standard record header\nprice::Int64: Price level (scaled by FIXEDPRICESCALE)\nsize::UInt32: Size at this price level\naction::Action.T: Price level action\nside::Side.T: Price level side\nflags::UInt8: Message flags\ndepth::UInt8: Book depth\nts_recv::Int64: Timestamp when message was received\nts_in_delta::Int32: Delta from ts_event to gateway ingestion\nsequence::UInt32: Message sequence number\nlevels::BidAskPair: Consolidated BBO information\n\n\n\n\n\n","category":"type"},{"location":"api/types/#DBN.CBBO1mMsg","page":"Types","title":"DBN.CBBO1mMsg","text":"CBBO1mMsg\n\nConsolidated best bid/offer message at 1-minute intervals.\n\nFields\n\nhd::RecordHeader: Standard record header\nprice::Int64: Price level (scaled by FIXEDPRICESCALE)\nsize::UInt32: Size at this price level\naction::Action.T: Price level action\nside::Side.T: Price level side\nflags::UInt8: Message flags\ndepth::UInt8: Book depth\nts_recv::Int64: Timestamp when message was received\nts_in_delta::Int32: Delta from ts_event to gateway ingestion\nsequence::UInt32: Message sequence number\nlevels::BidAskPair: Consolidated BBO information\n\n\n\n\n\n","category":"type"},{"location":"api/types/#DBN.TCBBOMsg","page":"Types","title":"DBN.TCBBOMsg","text":"TCBBOMsg\n\nTrade-consolidated best bid/offer message.\n\nFields\n\nhd::RecordHeader: Standard record header\nprice::Int64: Price level (scaled by FIXEDPRICESCALE)\nsize::UInt32: Size at this price level\naction::Action.T: Price level action\nside::Side.T: Price level side\nflags::UInt8: Message flags\ndepth::UInt8: Book depth\nts_recv::Int64: Timestamp when message was received\nts_in_delta::Int32: Delta from ts_event to gateway ingestion\nsequence::UInt32: Message sequence number\nlevels::BidAskPair: Trade-consolidated BBO information\n\n\n\n\n\n","category":"type"},{"location":"api/types/#DBN.BBO1sMsg","page":"Types","title":"DBN.BBO1sMsg","text":"BBO1sMsg\n\nBest bid/offer message at 1-second intervals.\n\nFields\n\nhd::RecordHeader: Standard record header\nprice::Int64: Price level (scaled by FIXEDPRICESCALE)\nsize::UInt32: Size at this price level\naction::Action.T: Price level action\nside::Side.T: Price level side\nflags::UInt8: Message flags\ndepth::UInt8: Book depth\nts_recv::Int64: Timestamp when message was received\nts_in_delta::Int32: Delta from ts_event to gateway ingestion\nsequence::UInt32: Message sequence number\nlevels::BidAskPair: BBO information\n\n\n\n\n\n","category":"type"},{"location":"api/types/#DBN.BBO1mMsg","page":"Types","title":"DBN.BBO1mMsg","text":"BBO1mMsg\n\nBest bid/offer message at 1-minute intervals.\n\nFields\n\nhd::RecordHeader: Standard record header\nprice::Int64: Price level (scaled by FIXEDPRICESCALE)\nsize::UInt32: Size at this price level\naction::Action.T: Price level action\nside::Side.T: Price level side\nflags::UInt8: Message flags\ndepth::UInt8: Book depth\nts_recv::Int64: Timestamp when message was received\nts_in_delta::Int32: Delta from ts_event to gateway ingestion\nsequence::UInt32: Message sequence number\nlevels::BidAskPair: BBO information\n\n\n\n\n\n","category":"type"},{"location":"api/types/#Status-and-Information-Messages","page":"Types","title":"Status and Information Messages","text":"","category":"section"},{"location":"api/types/#DBN.StatusMsg","page":"Types","title":"DBN.StatusMsg","text":"StatusMsg\n\nExchange status and trading state message.\n\nFields\n\nhd::RecordHeader: Standard record header\nts_recv::UInt64: Timestamp when message was received\naction::UInt16: Status action code\nreason::UInt16: Reason for status change\ntrading_event::UInt16: Trading event identifier\nis_trading::UInt8: Trading state (0=false, 1=true)\nis_quoting::UInt8: Quoting state (0=false, 1=true)\nis_short_sell_restricted::UInt8: Short sell restriction state (0=false, 1=true)\n\n\n\n\n\n","category":"type"},{"location":"api/types/#DBN.ImbalanceMsg","page":"Types","title":"DBN.ImbalanceMsg","text":"ImbalanceMsg\n\nOrder imbalance information for auction periods.\n\nFields\n\nhd::RecordHeader: Standard record header\nts_recv::Int64: Timestamp when message was received\nref_price::Int64: Reference price (scaled by FIXEDPRICESCALE)\nauction_time::UInt64: Auction time\ncont_book_clr_price::Int64: Continuous book clearing price\nauct_interest_clr_price::Int64: Auction interest clearing price\nssr_filling_price::Int64: Short sale restriction filling price\nind_match_price::Int64: Indicative match price\nupper_collar::Int64: Upper price collar\nlower_collar::Int64: Lower price collar\npaired_qty::UInt32: Paired quantity\ntotal_imbalance_qty::UInt32: Total imbalance quantity\nmarket_imbalance_qty::UInt32: Market imbalance quantity\nunpaired_qty::UInt32: Unpaired quantity\nauction_type::UInt8: Type of auction\nside::Side.T: Imbalance side\nauction_status::UInt8: Auction status\nfreeze_status::UInt8: Freeze status\nnum_extensions::UInt8: Number of extensions\nunpaired_side::UInt8: Unpaired side\nsignificant_imbalance::UInt8: Significant imbalance indicator\n\n\n\n\n\n","category":"type"},{"location":"api/types/#DBN.StatMsg","page":"Types","title":"DBN.StatMsg","text":"StatMsg\n\nStatistics message containing market statistics and derived data.\n\nFields\n\nhd::RecordHeader: Standard record header\nts_recv::UInt64: Timestamp when message was received\nts_ref::UInt64: Reference timestamp\nprice::Int64: Statistical price (scaled by FIXEDPRICESCALE)\nquantity::Int64: Statistical quantity (expanded to 64 bits in DBN v3)\nsequence::UInt32: Message sequence number\nts_in_delta::Int32: Delta from ts_event to gateway ingestion\nstat_type::UInt16: Type of statistic\nchannel_id::UInt16: Channel identifier (changed to UInt16 to match Rust)\nupdate_action::UInt8: Update action\nstat_flags::UInt8: Statistical flags\n\n\n\n\n\n","category":"type"},{"location":"api/types/#DBN.ErrorMsg","page":"Types","title":"DBN.ErrorMsg","text":"ErrorMsg\n\nError message from live gateway.\n\nFields\n\nhd::RecordHeader: Standard record header\nerr::String: Error message text\n\n\n\n\n\n","category":"type"},{"location":"api/types/#DBN.SymbolMappingMsg","page":"Types","title":"DBN.SymbolMappingMsg","text":"SymbolMappingMsg\n\nSymbol mapping message from live gateway.\n\nFields\n\nhd::RecordHeader: Standard record header\nstype_in::SType.T: Input symbol type\nstype_in_symbol::String: Input symbol string\nstype_out::SType.T: Output symbol type\nstype_out_symbol::String: Output symbol string\nstart_ts::Int64: Mapping start timestamp\nend_ts::Int64: Mapping end timestamp\n\n\n\n\n\n","category":"type"},{"location":"api/types/#DBN.SystemMsg","page":"Types","title":"DBN.SystemMsg","text":"SystemMsg\n\nSystem message from live gateway.\n\nFields\n\nhd::RecordHeader: Standard record header\nmsg::String: System message text\ncode::String: System message code\n\n\n\n\n\n","category":"type"},{"location":"api/types/#DBN.InstrumentDefMsg","page":"Types","title":"DBN.InstrumentDefMsg","text":"InstrumentDefMsg\n\nInstrument definition message containing detailed information about financial instruments.\n\nNote: DBN v2 and v3 have different field sets. This struct supports both versions:\n\nv2-only fields (tradingreferenceprice, tradingreferencedate, mdsecuritytradingstatus, settlprice_type) are set to 0 in v3\nv3-only fields (all leg_* fields) are set to 0/empty in v2\nrawinstrumentid is UInt32 in v2, UInt64 in v3\nraw_symbol is 19 bytes in v2, 22 bytes in v3\nasset is 7 bytes in v2, 11 bytes in v3\n\nFields\n\nhd::RecordHeader: Standard record header\nts_recv::Int64: Timestamp when message was received\nmin_price_increment::Int64: Minimum price increment\ndisplay_factor::Int64: Price display factor\nexpiration::Int64: Expiration timestamp\nactivation::Int64: Activation timestamp\nhigh_limit_price::Int64: High limit price\nlow_limit_price::Int64: Low limit price\nmax_price_variation::Int64: Maximum price variation\ntrading_reference_price::Int64: Trading reference price (DBN v2 only, 0 in v3)\nunit_of_measure_qty::Int64: Unit of measure quantity\nmin_price_increment_amount::Int64: Minimum price increment amount\nprice_ratio::Int64: Price ratio\ninst_attrib_value::Int32: Instrument attribute value\nunderlying_id::UInt32: Underlying instrument ID\nraw_instrument_id::UInt64: Raw instrument ID (UInt32 in v2, UInt64 in v3)\nmarket_depth_implied::Int32: Market depth implied\nmarket_depth::Int32: Market depth\nmarket_segment_id::UInt32: Market segment ID\nmax_trade_vol::UInt32: Maximum trade volume\nmin_lot_size::Int32: Minimum lot size\nmin_lot_size_block::Int32: Minimum lot size block\nmin_lot_size_round_lot::Int32: Minimum lot size round lot\nmin_trade_vol::UInt32: Minimum trade volume\ncontract_multiplier::Int32: Contract multiplier\ndecay_quantity::Int32: Decay quantity\noriginal_contract_size::Int32: Original contract size\ntrading_reference_date::UInt16: Trading reference date (DBN v2 only, 0 in v3)\nappl_id::Int16: Application ID\nmaturity_year::UInt16: Maturity year\ndecay_start_date::UInt16: Decay start date\nchannel_id::UInt16: Channel ID\ncurrency::String: Currency code\nsettl_currency::String: Settlement currency\nsecsubtype::String: Security subtype\nraw_symbol::String: Raw symbol (19 bytes in v2, 22 bytes in v3)\ngroup::String: Group identifier\nexchange::String: Exchange identifier\nasset::String: Asset identifier (7 bytes in v2, 11 bytes in v3)\ncfi::String: CFI code\nsecurity_type::String: Security type\nunit_of_measure::String: Unit of measure\nunderlying::String: Underlying identifier\nstrike_price_currency::String: Strike price currency\ninstrument_class::InstrumentClass.T: Instrument class\nstrike_price::Int64: Strike price\nmatch_algorithm::Char: Match algorithm\nmd_security_trading_status::UInt8: MD security trading status (DBN v2 only, 0 in v3)\nmain_fraction::UInt8: Main fraction\nprice_display_format::UInt8: Price display format\nsettl_price_type::UInt8: Settlement price type (DBN v2 only, 0 in v3)\nsub_fraction::UInt8: Sub fraction\nunderlying_product::UInt8: Underlying product\nsecurity_update_action::Char: Security update action\nmaturity_month::UInt8: Maturity month\nmaturity_day::UInt8: Maturity day\nmaturity_week::UInt8: Maturity week\nuser_defined_instrument::Bool: User defined instrument flag\ncontract_multiplier_unit::Int8: Contract multiplier unit\nflow_schedule_type::Int8: Flow schedule type\ntick_rule::UInt8: Tick rule\nleg_count::UInt16: Number of legs (DBN v3 only, 0 in v2)\nleg_index::UInt16: Leg index (DBN v3 only, 0 in v2)\nleg_instrument_id::UInt32: Leg instrument ID (DBN v3 only, 0 in v2)\nleg_raw_symbol::String: Leg raw symbol (DBN v3 only, empty in v2)\nleg_side::Side.T: Leg side (DBN v3 only, NONE in v2)\nleg_underlying_id::UInt32: Leg underlying ID (DBN v3 only, 0 in v2)\nleg_instrument_class::InstrumentClass.T: Leg instrument class (DBN v3 only, UNKNOWN_0 in v2)\nleg_ratio_qty_numerator::UInt32: Leg ratio quantity numerator (DBN v3 only, 0 in v2)\nleg_ratio_qty_denominator::UInt32: Leg ratio quantity denominator (DBN v3 only, 0 in v2)\nleg_ratio_price_numerator::UInt32: Leg ratio price numerator (DBN v3 only, 0 in v2)\nleg_ratio_price_denominator::UInt32: Leg ratio price denominator (DBN v3 only, 0 in v2)\nleg_price::Int64: Leg price (DBN v3 only, 0 in v2)\nleg_delta::Int64: Leg delta (DBN v3 only, 0 in v2)\n\n\n\n\n\n","category":"type"},{"location":"api/types/#Supporting-Types","page":"Types","title":"Supporting Types","text":"","category":"section"},{"location":"api/types/#DBN.VersionUpgradePolicy","page":"Types","title":"DBN.VersionUpgradePolicy","text":"VersionUpgradePolicy\n\nEncapsulates the version upgrade policy for DBN files.\n\nFields\n\nupgrade_policy::UInt8: Policy for handling version upgrades\n\n\n\n\n\n","category":"type"},{"location":"api/types/#DBN.DatasetCondition","page":"Types","title":"DBN.DatasetCondition","text":"DatasetCondition\n\nConditions and constraints for a dataset.\n\nFields\n\nlast_ts_out::Int64: Last timestamp output\nstart_ts::Int64: Dataset start timestamp\nend_ts::Int64: Dataset end timestamp\nlimit::UInt64: Record limit for the dataset\n\n\n\n\n\n","category":"type"},{"location":"api/types/#Message-Structure","page":"Types","title":"Message Structure","text":"","category":"section"},{"location":"api/types/","page":"Types","title":"Types","text":"All DBN messages follow a common pattern:","category":"page"},{"location":"api/types/","page":"Types","title":"Types","text":"Record Header (RecordHeader): Metadata about the record\nlength: Record length in 4-byte units\nrtype: Record type identifier\npublisher_id: Data publisher identifier\ninstrument_id: Instrument identifier\nts_event: Event timestamp (nanoseconds)\nMessage Fields: Schema-specific fields","category":"page"},{"location":"api/types/#Field-Types","page":"Types","title":"Field Types","text":"","category":"section"},{"location":"api/types/","page":"Types","title":"Types","text":"Prices: Fixed-point Int64 (use price_to_float / float_to_price)\nTimestamps: Nanoseconds since Unix epoch (Int64)\nSizes: UInt32 for quantities\nIDs: UInt32 or UInt64 for identifiers\nEnums: Action, Side, Schema, etc.","category":"page"},{"location":"api/types/#Field-Meanings","page":"Types","title":"Field Meanings","text":"","category":"section"},{"location":"api/types/","page":"Types","title":"Types","text":"For detailed field meanings and specifications, see:","category":"page"},{"location":"api/types/","page":"Types","title":"Types","text":"Databento Schema Documentation\nDBN Format Specification","category":"page"},{"location":"api/types/#See-Also","page":"Types","title":"See Also","text":"","category":"section"},{"location":"api/types/","page":"Types","title":"Types","text":"Enums - Enum types used in messages\nUtilities - Helper functions for working with types\nReading Guide - How to read different message types","category":"page"},{"location":"troubleshooting/#Troubleshooting","page":"Troubleshooting","title":"Troubleshooting","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Common issues and solutions when working with DBN.jl.","category":"page"},{"location":"troubleshooting/#Installation-Issues","page":"Troubleshooting","title":"Installation Issues","text":"","category":"section"},{"location":"troubleshooting/#Package-Not-Found","page":"Troubleshooting","title":"Package Not Found","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Problem: ERROR: Package DBN not found","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solution: DBN.jl is not registered. Install from GitHub:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"using Pkg\nPkg.add(url=\"https://github.com/tbeason/DBN.jl\")","category":"page"},{"location":"troubleshooting/#Dependency-Conflicts","page":"Troubleshooting","title":"Dependency Conflicts","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Problem: Version conflicts with other packages","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solution:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"using Pkg\nPkg.update()  # Update all packages\nPkg.resolve()  # Resolve conflicts","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"If problems persist:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Pkg.rm(\"DBN\")\nPkg.gc()  # Clean up\nPkg.add(url=\"https://github.com/tbeason/DBN.jl\")","category":"page"},{"location":"troubleshooting/#Compression-Issues","page":"Troubleshooting","title":"Compression Issues","text":"","category":"section"},{"location":"troubleshooting/#Zstd-Decompression-Errors","page":"Troubleshooting","title":"Zstd Decompression Errors","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Problem: ERROR: zstd error when reading .zst files","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Possible causes:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Corrupt compressed file\nCodecZstd not properly installed\nFile not actually Zstd compressed","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solutions:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"# 1. Verify CodecZstd is installed\nusing CodecZstd\n\n# 2. Reinstall codec\nusing Pkg\nPkg.rm(\"CodecZstd\")\nPkg.add(\"CodecZstd\")\n\n# 3. Check file is valid\n# Try decompressing manually\nusing TranscodingStreams, CodecZstd\nopen(\"file.dbn.zst\") do io\n    zstd_stream = ZstdDecompressorStream(io)\n    # Should not error\nend","category":"page"},{"location":"troubleshooting/#Compression-Not-Working","page":"Troubleshooting","title":"Compression Not Working","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Problem: .zst files created but not compressed","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solution: Ensure you're using the .zst extension:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"# ✅ Will compress\nwrite_dbn(\"output.dbn.zst\", metadata, records)\n\n# ❌ Won't compress (missing .zst)\nwrite_dbn(\"output.dbn\", metadata, records)","category":"page"},{"location":"troubleshooting/#Memory-Issues","page":"Troubleshooting","title":"Memory Issues","text":"","category":"section"},{"location":"troubleshooting/#Out-of-Memory-When-Reading","page":"Troubleshooting","title":"Out of Memory When Reading","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Problem: ERROR: Out of memory when reading large files","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solution: Use streaming instead of bulk reading:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"# ❌ Don't load huge files into memory\nrecords = read_dbn(\"huge_file.dbn\")  # OOM!\n\n# ✅ Stream instead\nforeach_record(\"huge_file.dbn\", TradeMsg) do record\n    # Process without loading all records\nend\n\n# ✅ Or use iterator\nfor record in DBNStream(\"huge_file.dbn\")\n    # Process one at a time\nend","category":"page"},{"location":"troubleshooting/#High-Memory-Usage-with-Iterator","page":"Troubleshooting","title":"High Memory Usage with Iterator","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Problem: DBNStream uses too much memory","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solution: Use callback pattern instead:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"# ❌ Iterator uses more memory\nfor trade in DBNStream(\"file.dbn\")\n    process(trade)\nend\n\n# ✅ Callback uses minimal memory\nforeach_trade(\"file.dbn\") do trade\n    process(trade)\nend","category":"page"},{"location":"troubleshooting/#Performance-Issues","page":"Troubleshooting","title":"Performance Issues","text":"","category":"section"},{"location":"troubleshooting/#Slower-Than-Expected","page":"Troubleshooting","title":"Slower Than Expected","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Problem: Reading/writing is slow","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Checklist:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Use type-specific readers:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"# ❌ Slow\nrecords = read_dbn(\"trades.dbn\")\n\n# ✅ 5-6x faster\ntrades = read_trades(\"trades.dbn\")","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Use callbacks for processing:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"# ❌ Slower\ntrades = read_trades(\"file.dbn\")\ntotal = sum(t.size for t in trades)\n\n# ✅ Up to 6x faster\ntotal = Ref(0)\nforeach_trade(\"file.dbn\") do trade\n    total[] += trade.size\nend","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Check for type instability:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"# Run with type checking\nusing DBN\n@code_warntype read_trades(\"file.dbn\")","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Profile your code:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"using Profile\n\n@profile begin\n    foreach_trade(\"file.dbn\") do trade\n        # Your processing code\n    end\nend\n\nProfile.print()","category":"page"},{"location":"troubleshooting/#Data-Issues","page":"Troubleshooting","title":"Data Issues","text":"","category":"section"},{"location":"troubleshooting/#Wrong-Schema-Error","page":"Troubleshooting","title":"Wrong Schema Error","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Problem: ERROR: Expected TradeMsg but got rtype=...","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Cause: File contains different message type than expected","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solutions:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Check file schema:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"metadata, _ = read_dbn_with_metadata(\"file.dbn\")\nprintln(\"Schema: $(metadata.schema)\")","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Use generic reader:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"# For mixed-schema files\nrecords = read_dbn(\"file.dbn\")\n\n# Or iterator\nfor record in DBNStream(\"file.dbn\")\n    if record isa TradeMsg\n        # Handle trade\n    elseif record isa MBOMsg\n        # Handle MBO\n    end\nend","category":"page"},{"location":"troubleshooting/#Price-Conversion-Issues","page":"Troubleshooting","title":"Price Conversion Issues","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Problem: Prices look wrong","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Remember: DBN uses fixed-point prices!","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"# ❌ Wrong - prices are fixed-point integers\nprintln(trade.price)  # e.g., 1005000 (not 100.50!)\n\n# ✅ Convert to float\nprintln(price_to_float(trade.price))  # 100.5","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Creating prices:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"# ✅ Convert float to fixed-point\nprice = float_to_price(100.50)  # 1005000\n\n# ❌ Don't use float directly\ntrade.price = 100.50  # WRONG!","category":"page"},{"location":"troubleshooting/#Timestamp-Conversion-Issues","page":"Troubleshooting","title":"Timestamp Conversion Issues","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Problem: Timestamps look strange","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Remember: DBN uses nanosecond timestamps!","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"# ❌ Raw timestamp\nprintln(trade.hd.ts_event)  # 1704067200000000000 (nanoseconds!)\n\n# ✅ Convert to DateTime\nusing Dates\nprintln(ts_to_datetime(trade.hd.ts_event))  # 2024-01-01T00:00:00\n\n# ✅ Format nicely\ndt = ts_to_datetime(trade.hd.ts_event)\nprintln(Dates.format(dt, \"yyyy-mm-dd HH:MM:SS\"))","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Creating timestamps:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"using Dates\n\n# ✅ Convert DateTime to nanoseconds\ndt = DateTime(2024, 1, 1, 9, 30)\nts = datetime_to_ts(dt)\n\n# ❌ Don't use DateTime directly\nrecord.ts_event = DateTime(2024, 1, 1)  # WRONG!","category":"page"},{"location":"troubleshooting/#File-Format-Issues","page":"Troubleshooting","title":"File Format Issues","text":"","category":"section"},{"location":"troubleshooting/#Unsupported-DBN-Version","page":"Troubleshooting","title":"Unsupported DBN Version","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Problem: ERROR: Unsupported DBN version 1","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Cause: DBN.jl only supports DBN v2 and v3","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solution: Upgrade v1 files using Databento CLI:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"dbn version1.dbn --output version2.dbn --upgrade","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"See Databento CLI documentation.","category":"page"},{"location":"troubleshooting/#Corrupt-File","page":"Troubleshooting","title":"Corrupt File","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Problem: ERROR when reading file","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Diagnostics:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"# Check file size\nfilesize(\"file.dbn\")  # Should be > 0\n\n# Check file is readable\nopen(\"file.dbn\", \"r\") do io\n    read(io, 1)  # Should not error\nend\n\n# Try reading just metadata\nmetadata, _ = read_dbn_with_metadata(\"file.dbn\")\nprintln(metadata)","category":"page"},{"location":"troubleshooting/#Callback-Issues","page":"Troubleshooting","title":"Callback Issues","text":"","category":"section"},{"location":"troubleshooting/#Cannot-Mutate-Variable","page":"Troubleshooting","title":"Cannot Mutate Variable","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Problem: ERROR: cannot assign variable from callback","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Cause: Variables from outer scope are immutable in callbacks","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solution: Use Ref for mutable state:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"# ❌ Won't work\ncount = 0\nforeach_trade(\"file.dbn\") do trade\n    count += 1  # ERROR!\nend\n\n# ✅ Use Ref\ncount = Ref(0)\nforeach_trade(\"file.dbn\") do trade\n    count[] += 1  # OK\nend\nprintln(count[])","category":"page"},{"location":"troubleshooting/#Cannot-Break-From-Callback","page":"Troubleshooting","title":"Cannot Break From Callback","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Problem: Want to stop early but callbacks can't break","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solution: Use iterator pattern instead:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"# ❌ Can't do this with callbacks\nforeach_trade(\"file.dbn\") do trade\n    if trade.size > 100_000\n        break  # ERROR: can't break from callback\n    end\nend\n\n# ✅ Use iterator\nfor trade in DBNStream(\"file.dbn\")\n    if trade.size > 100_000\n        println(\"Found large trade!\")\n        break  # OK\n    end\nend","category":"page"},{"location":"troubleshooting/#Conversion-Issues","page":"Troubleshooting","title":"Conversion Issues","text":"","category":"section"},{"location":"troubleshooting/#CSV/JSON-Round-Trip-Differences","page":"Troubleshooting","title":"CSV/JSON Round-Trip Differences","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Problem: Data changes after CSV → DBN → CSV conversion","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Cause: Text formats may lose precision or metadata","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Best Practice:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Use DBN format for archival storage\nUse CSV/JSON only for analysis or export\nDon't rely on perfect round-trip through text formats","category":"page"},{"location":"troubleshooting/#Parquet-Schema-Mismatch","page":"Troubleshooting","title":"Parquet Schema Mismatch","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Problem: ERROR when converting Parquet to DBN","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Cause: Column names or types don't match DBN schema","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solution: Ensure Parquet has correct schema:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"# Check column names\nusing Parquet2\ndf = Parquet2.Dataset(\"file.parquet\") |> DataFrame\nnames(df)  # Should match DBN field names\n\n# Ensure correct types (especially timestamps, prices)","category":"page"},{"location":"troubleshooting/#Getting-Help","page":"Troubleshooting","title":"Getting Help","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"If you encounter issues not covered here:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Check the documentation for the specific function\nSearch existing GitHub issues: github.com/tbeason/DBN.jl/issues\nAsk on GitHub Discussions (if available)\nOpen a new issue with:\nJulia version (versioninfo())\nDBN.jl version\nMinimal example reproducing the issue\nError message and stack trace","category":"page"},{"location":"troubleshooting/#Minimal-Reproducible-Example","page":"Troubleshooting","title":"Minimal Reproducible Example","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"When reporting issues, include:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"using Pkg, DBN\n\n# Julia version\nversioninfo()\n\n# Package version\nPkg.status(\"DBN\")\n\n# Minimal code that reproduces the issue\n# (Use synthetic data if possible)\nmetadata = Metadata(...)\nrecords = [TradeMsg(...)]\nwrite_dbn(\"test.dbn\", metadata, records)\nresult = read_trades(\"test.dbn\")  # Error occurs here","category":"page"},{"location":"troubleshooting/#Common-Error-Messages","page":"Troubleshooting","title":"Common Error Messages","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Error Likely Cause Solution\nOut of memory File too large for RAM Use streaming (callbacks or iterator)\nzstd error Corrupt .zst file or codec issue Reinstall CodecZstd or check file\nExpected TradeMsg but got rtype=... Wrong schema Check metadata.schema, use correct reader\nUnsupported DBN version 1 Old DBN format Upgrade using Databento CLI\ncannot assign variable Immutable in callback scope Use Ref for mutable state\nSystemError: opening file File not found or permissions Check path and file permissions","category":"page"},{"location":"troubleshooting/#See-Also","page":"Troubleshooting","title":"See Also","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Quick Start Guide - Basic usage\nReading Guide - Reading methods\nPerformance Guide - Optimization\nGitHub Issues - Report bugs\nDatabento Documentation - DBN format details","category":"page"},{"location":"guide/conversion/#Format-Conversion","page":"Format Conversion","title":"Format Conversion","text":"","category":"section"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"DBN.jl supports bidirectional conversion between DBN and other popular formats: CSV, JSON, Parquet, and DataFrames.","category":"page"},{"location":"guide/conversion/#Supported-Formats","page":"Format Conversion","title":"Supported Formats","text":"","category":"section"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"Format Read Write Use Case\nCSV ✅ ✅ Human-readable, Excel-compatible\nJSON/JSONL ✅ ✅ Human-readable, web APIs\nParquet ✅ ✅ Analytics, data lakes\nDataFrame N/A ✅ In-memory analysis","category":"page"},{"location":"guide/conversion/#DBN-to-Other-Formats","page":"Format Conversion","title":"DBN to Other Formats","text":"","category":"section"},{"location":"guide/conversion/#DBN-to-CSV","page":"Format Conversion","title":"DBN to CSV","text":"","category":"section"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"using DBN\n\n# Convert DBN to CSV\ndbn_to_csv(\"trades.dbn\", \"trades.csv\")\n\n# Works with compressed files\ndbn_to_csv(\"trades.dbn.zst\", \"trades.csv\")","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"CSV Output Format:","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"Header row with column names\nOne record per row\nTimestamps as nanoseconds (Int64)\nPrices as fixed-point integers\nEnums as strings (e.g., \"BID\", \"ASK\")","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"Example CSV:","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"ts_event,publisher_id,instrument_id,price,size,action,side,flags,depth,ts_recv,ts_in_delta,sequence\n1704067200000000000,1,12345,1005000,100,TRADE,BID,0,0,1704067200000000000,0,1\n1704067200100000000,1,12345,1005500,200,TRADE,ASK,0,0,1704067200100000000,0,2","category":"page"},{"location":"guide/conversion/#DBN-to-JSON","page":"Format Conversion","title":"DBN to JSON","text":"","category":"section"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"using DBN\n\n# Convert to JSON (array of objects)\ndbn_to_json(\"trades.dbn\", \"trades.json\")\n\n# Convert to JSONL (one object per line)\ndbn_to_json(\"trades.dbn\", \"trades.jsonl\")","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"JSON Output Format:","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"[\n  {\n    \"hd\": {\n      \"length\": 11,\n      \"rtype\": 160,\n      \"publisher_id\": 1,\n      \"instrument_id\": 12345,\n      \"ts_event\": 1704067200000000000\n    },\n    \"price\": 1005000,\n    \"size\": 100,\n    \"action\": \"T\",\n    \"side\": \"B\",\n    \"flags\": 0,\n    \"depth\": 0,\n    \"ts_recv\": 1704067200000000000,\n    \"ts_in_delta\": 0,\n    \"sequence\": 1\n  }\n]","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"JSONL Output Format (one record per line):","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"{\"hd\":{\"length\":11,\"rtype\":160,...},\"price\":1005000,...}\n{\"hd\":{\"length\":11,\"rtype\":160,...},\"price\":1005500,...}","category":"page"},{"location":"guide/conversion/#DBN-to-Parquet","page":"Format Conversion","title":"DBN to Parquet","text":"","category":"section"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"using DBN\n\n# Convert to Parquet\ndbn_to_parquet(\"trades.dbn\", \"output_directory/\")\n\n# Output creates trades.parquet in the directory","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"Parquet Output:","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"Columnar format (efficient for analytics)\nPreserves data types\nAutomatic compression\nCompatible with Arrow, DuckDB, pandas, etc.","category":"page"},{"location":"guide/conversion/#DBN-to-DataFrame","page":"Format Conversion","title":"DBN to DataFrame","text":"","category":"section"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"using DBN\n\n# Read DBN file\nrecords = read_trades(\"trades.dbn\")\n\n# Convert to DataFrame\ndf = records_to_dataframe(records)\n\n# Now you can use DataFrames.jl operations\nusing DataFrames, Statistics\n\n# Example: Calculate average price\nmean_price = mean(df.price)\n\n# Group by side\nusing DataFramesMeta\n@chain df begin\n    @groupby(:side)\n    @combine(:avg_price = mean(:price),\n             :total_volume = sum(:size))\nend","category":"page"},{"location":"guide/conversion/#Other-Formats-to-DBN","page":"Format Conversion","title":"Other Formats to DBN","text":"","category":"section"},{"location":"guide/conversion/#JSON-to-DBN","page":"Format Conversion","title":"JSON to DBN","text":"","category":"section"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"using DBN\n\n# Convert JSON to DBN\njson_to_dbn(\"trades.json\", \"trades.dbn\")\n\n# Also supports JSONL (one record per line)\njson_to_dbn(\"trades.jsonl\", \"trades.dbn\")","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"Requirements:","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"JSON must match DBN message structure\nTimestamps in nanoseconds\nPrices as fixed-point integers or floats (will be converted)\nEnum fields as strings or integer values","category":"page"},{"location":"guide/conversion/#CSV-to-DBN","page":"Format Conversion","title":"CSV to DBN","text":"","category":"section"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"using DBN\n\n# Convert CSV to DBN (requires schema specification)\ncsv_to_dbn(\n    \"trades.csv\",\n    \"trades.dbn\",\n    schema = Schema.TRADES,\n    dataset = \"XNAS\"\n)\n\n# With compression\ncsv_to_dbn(\n    \"trades.csv\",\n    \"trades.dbn.zst\",\n    schema = Schema.TRADES,\n    dataset = \"XNAS\"\n)","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"CSV Requirements:","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"Column names must match DBN field names\nTimestamps as nanoseconds (Int64)\nPrices as fixed-point Int64 or will convert from Float64\nEnum fields as strings or integer codes","category":"page"},{"location":"guide/conversion/#Parquet-to-DBN","page":"Format Conversion","title":"Parquet to DBN","text":"","category":"section"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"using DBN\n\n# Convert Parquet to DBN\nparquet_to_dbn(\n    \"trades.parquet\",\n    \"trades.dbn\",\n    schema = Schema.TRADES,\n    dataset = \"XNAS\"\n)","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"Parquet Requirements:","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"Schema must match DBN message type\nColumn names must match field names\nAppropriate data types","category":"page"},{"location":"guide/conversion/#Use-Cases","page":"Format Conversion","title":"Use Cases","text":"","category":"section"},{"location":"guide/conversion/#CSV:-Human-Readable-Exchange","page":"Format Conversion","title":"CSV: Human-Readable Exchange","text":"","category":"section"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"Best for:","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"Sharing data with Excel users\nQuick inspection with text tools\nSimple data exchange","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"Limitations:","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"Larger file size than DBN\nSlower read/write performance\nLoss of type information","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"Example: Export sample for Excel analysis","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"using DBN\n\n# Read first 10,000 trades\ntrades = read_trades(\"large_file.dbn.zst\")\nsample = trades[1:10_000]\n\n# Create temporary file\ntemp_metadata, _ = read_dbn_with_metadata(\"large_file.dbn.zst\")\nwrite_dbn(\"sample.dbn\", temp_metadata, sample)\n\n# Convert to CSV for Excel\ndbn_to_csv(\"sample.dbn\", \"sample.csv\")\n\n# Clean up\nrm(\"sample.dbn\")","category":"page"},{"location":"guide/conversion/#JSON:-API-Integration","page":"Format Conversion","title":"JSON: API Integration","text":"","category":"section"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"Best for:","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"Web API responses\nJavaScript applications\nHuman-readable debugging","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"Limitations:","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"Largest file size\nSlowest performance\nVerbose","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"Example: Export for web application","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"using DBN\n\n# Get recent trades\ntrades = read_trades(\"recent.dbn\")\n\n# Export most recent 100 as JSON\nlatest = trades[end-99:end]\n\n# Create temporary DBN file\nmetadata, _ = read_dbn_with_metadata(\"recent.dbn\")\nwrite_dbn(\"latest.dbn\", metadata, latest)\n\n# Convert to JSON for API\ndbn_to_json(\"latest.dbn\", \"api_response.json\")\n\nrm(\"latest.dbn\")","category":"page"},{"location":"guide/conversion/#Parquet:-Analytics-Pipeline","page":"Format Conversion","title":"Parquet: Analytics Pipeline","text":"","category":"section"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"Best for:","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"Data lakes and warehouses\nIntegration with Spark, Dask, DuckDB\nColumnar analytics\nLong-term storage","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"Advantages:","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"Efficient columnar format\nGood compression\nWide tool support","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"Example: Export for DuckDB analysis","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"using DBN\n\n# Convert historical data to Parquet\ndbn_to_parquet(\"2024_trades.dbn.zst\", \"data_lake/\")\n\n# Now you can query with DuckDB, pandas, etc.\n# SELECT AVG(price) FROM 'data_lake/trades.parquet'","category":"page"},{"location":"guide/conversion/#DataFrame:-In-Memory-Analysis","page":"Format Conversion","title":"DataFrame: In-Memory Analysis","text":"","category":"section"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"Best for:","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"Statistical analysis\nData transformation\nVisualization\nInteractive exploration","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"Example: Analyze trade patterns","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"using DBN, DataFrames, Statistics, Dates\n\n# Read data\ntrades = read_trades(\"trades.dbn\")\ndf = records_to_dataframe(trades)\n\n# Add derived columns\ndf.datetime = ts_to_datetime.(df.ts_event)\ndf.price_float = price_to_float.(df.price)\n\n# Time series analysis\nusing DataFramesMeta\n\n# Calculate 5-minute average prices\n@chain df begin\n    @transform(:minute = floor(:datetime, Minute(5)))\n    @groupby(:minute)\n    @combine(:avg_price = mean(:price_float),\n             :volume = sum(:size),\n             :count = length(:price_float))\nend","category":"page"},{"location":"guide/conversion/#Round-Trip-Conversion","page":"Format Conversion","title":"Round-Trip Conversion","text":"","category":"section"},{"location":"guide/conversion/#DBN-CSV-DBN","page":"Format Conversion","title":"DBN → CSV → DBN","text":"","category":"section"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"using DBN\n\n# Original file\nmetadata_original, records_original = read_dbn_with_metadata(\"original.dbn\")\n\n# Convert to CSV\ndbn_to_csv(\"original.dbn\", \"temp.csv\")\n\n# Convert back to DBN\ncsv_to_dbn(\"temp.csv\", \"restored.dbn\",\n           schema = metadata_original.schema,\n           dataset = metadata_original.dataset)\n\n# Verify\nrecords_restored = read_dbn(\"restored.dbn\")\n@assert length(records_original) == length(records_restored)\n\n# Clean up\nrm(\"temp.csv\")","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"warning: Precision Loss\nRound-trip conversions through text formats (CSV, JSON) may lose precision or metadata. Use DBN format for archival storage.","category":"page"},{"location":"guide/conversion/#Performance-Comparison","page":"Format Conversion","title":"Performance Comparison","text":"","category":"section"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"Conversion Time (100k trades):","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"Operation Time Notes\nDBN → CSV ~0.5s Simple text output\nDBN → JSON ~1.2s More verbose format\nDBN → Parquet ~0.3s Efficient columnar write\nCSV → DBN ~0.8s Text parsing overhead\nJSON → DBN ~1.5s Complex parsing\nParquet → DBN ~0.4s Efficient columnar read","category":"page"},{"location":"guide/conversion/#File-Size-Comparison","page":"Format Conversion","title":"File Size Comparison","text":"","category":"section"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"File Sizes (1M trades):","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"Format Size Compression\nDBN (uncompressed) 46 MB 1.0x (baseline)\nDBN (compressed .zst) 16 MB 2.9x\nCSV 95 MB 0.48x (larger!)\nJSON 180 MB 0.26x (much larger!)\nParquet 25 MB 1.8x","category":"page"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"Recommendation: Use compressed DBN (.zst) for storage and distribution.","category":"page"},{"location":"guide/conversion/#Tips-and-Best-Practices","page":"Format Conversion","title":"Tips and Best Practices","text":"","category":"section"},{"location":"guide/conversion/#1.-Use-Compressed-DBN-for-Storage","page":"Format Conversion","title":"1. Use Compressed DBN for Storage","text":"","category":"section"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"# ✅ Smallest, fastest\ndbn_to_csv(\"data.dbn.zst\", \"analysis.csv\")  # For analysis only\n\n# ❌ Don't store in CSV long-term\n# CSV files are 2-6x larger than compressed DBN","category":"page"},{"location":"guide/conversion/#2.-Convert-Only-What-You-Need","page":"Format Conversion","title":"2. Convert Only What You Need","text":"","category":"section"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"# ✅ Filter before converting\ntrades = read_trades(\"all.dbn.zst\")\nhigh_value = filter(t -> price_to_float(t.price) > 1000, trades)\n\nmetadata, _ = read_dbn_with_metadata(\"all.dbn.zst\")\nwrite_dbn(\"filtered.dbn\", metadata, high_value)\ndbn_to_csv(\"filtered.dbn\", \"high_value.csv\")\n\n# ❌ Don't convert everything then filter\ndbn_to_csv(\"all.dbn.zst\", \"huge.csv\")  # Wasteful!","category":"page"},{"location":"guide/conversion/#3.-Batch-Processing-for-Large-Files","page":"Format Conversion","title":"3. Batch Processing for Large Files","text":"","category":"section"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"# Process in chunks for very large files\nusing DBN\n\nwriter = open(\"output.csv\", \"w\")\nprintln(writer, \"ts_event,price,size,side\")  # Header\n\nforeach_trade(\"huge_file.dbn.zst\") do trade\n    # Write CSV row\n    println(writer, \"$(trade.hd.ts_event),$(trade.price),$(trade.size),$(trade.side)\")\nend\n\nclose(writer)","category":"page"},{"location":"guide/conversion/#See-Also","page":"Format Conversion","title":"See Also","text":"","category":"section"},{"location":"guide/conversion/","page":"Format Conversion","title":"Format Conversion","text":"Reading Data - Reading DBN files\nWriting Data - Writing DBN files\nAPI Reference - Conversion - Conversion function reference\nDatabento Documentation - Format specifications","category":"page"},{"location":"guide/reading/#Reading-Data","page":"Reading Data","title":"Reading Data","text":"","category":"section"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"DBN.jl provides multiple ways to read DBN files, each optimized for different use cases. This guide helps you choose the right approach for your needs.","category":"page"},{"location":"guide/reading/#Quick-Reference","page":"Reading Data","title":"Quick Reference","text":"","category":"section"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"Method Best For Performance Memory Usage\nforeach_*() callbacks Processing/aggregation ⚡⚡⚡ Fastest (40M rec/sec) Minimal\nread_trades(), etc. Bulk loading single schema ⚡⚡ Fast (5-6x generic) Full file\nDBNStream() iterator Large files, mixed schemas ⚡ Moderate Minimal\nread_dbn() generic Quick exploration, mixed schemas Baseline Full file","category":"page"},{"location":"guide/reading/#Reading-Approaches","page":"Reading Data","title":"Reading Approaches","text":"","category":"section"},{"location":"guide/reading/#Approach-1:-Type-Specific-Readers-(Recommended-for-Bulk-Loading)","page":"Reading Data","title":"Approach 1: Type-Specific Readers (Recommended for Bulk Loading)","text":"","category":"section"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"When you know the schema and want to load the entire file into memory:","category":"page"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"# 5-6x faster than generic read_dbn()\ntrades = read_trades(\"trades.dbn\")\nmbos = read_mbo(\"mbo.dbn\")\nohlcv = read_ohlcv(\"ohlcv.dbn\")","category":"page"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"Available readers:","category":"page"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"read_trades() - Trade messages\nread_mbo() - Market-by-order messages\nread_mbp1() - Top-of-book market-by-price\nread_mbp10() - 10-level market-by-price\nread_tbbo() - Top-of-book BBO\nread_ohlcv() - OHLCV bars (generic)\nread_ohlcv_1s(), read_ohlcv_1m(), read_ohlcv_1h(), read_ohlcv_1d() - Time-specific OHLCV","category":"page"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"Plus additional readers for other schemas. See the API Reference for the complete list.","category":"page"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"When to use:","category":"page"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"You need all records in memory\nWorking with single-schema files\nPerformance is important\nFile size fits in available RAM","category":"page"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"Example:","category":"page"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"using DBN\n\n# Read trades file\ntrades = read_trades(\"AAPL_trades_2024-01-01.dbn.zst\")\n\n# All records are now in a Vector{TradeMsg}\nprintln(\"Loaded $(length(trades)) trades\")\n\n# Direct access to any record\nfirst_trade = trades[1]\nprintln(\"First trade: price=$(price_to_float(first_trade.price)), size=$(first_trade.size)\")","category":"page"},{"location":"guide/reading/#Approach-2:-Callback-Streaming-(Recommended-for-Processing)","page":"Reading Data","title":"Approach 2: Callback Streaming (Recommended for Processing)","text":"","category":"section"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"For maximum performance when you don't need to keep all records in memory:","category":"page"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"# Near-zero allocation, up to 40M records/sec\ntotal_volume = Ref(0)\nforeach_trade(\"large_file.dbn.zst\") do trade\n    total_volume[] += trade.size\nend","category":"page"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"Available callback functions:","category":"page"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"foreach_trade() - Stream trades\nforeach_mbo() - Stream MBO messages\nforeach_mbp1() - Stream top-of-book\nforeach_mbp10() - Stream 10-level depth\nforeach_ohlcv() - Stream OHLCV bars\nAnd more... (see Streaming API)","category":"page"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"When to use:","category":"page"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"Processing or aggregating data (sums, statistics, filters)\nFiles too large for available RAM\nMaximum performance needed\nYou don't need random access to records","category":"page"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"Example: Calculate VWAP","category":"page"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"using DBN\n\ntotal_price_volume = Ref(0.0)\ntotal_volume = Ref(0)\n\nforeach_trade(\"trades.dbn\") do trade\n    price = price_to_float(trade.price)\n    total_price_volume[] += price * trade.size\n    total_volume[] += trade.size\nend\n\nvwap = total_price_volume[] / total_volume[]\nprintln(\"VWAP: $vwap\")","category":"page"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"Example: Filter and Save","category":"page"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"# Extract high-volume trades\nhigh_volume = TradeMsg[]\nforeach_trade(\"all_trades.dbn\") do trade\n    if trade.size >= 10_000\n        push!(high_volume, trade)\n    end\nend\n\n# Write filtered results\nmetadata, _ = read_dbn_with_metadata(\"all_trades.dbn\")\nwrite_dbn(\"high_volume.dbn\", metadata, high_volume)","category":"page"},{"location":"guide/reading/#Approach-3:-Iterator-Pattern-(For-Flexibility)","page":"Reading Data","title":"Approach 3: Iterator Pattern (For Flexibility)","text":"","category":"section"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"When you need streaming but want more control than callbacks:","category":"page"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"for record in DBNStream(\"file.dbn\")\n    # Process record\n    println(\"Price: $(price_to_float(record.price))\")\n\n    # Can break early if needed\n    if some_condition\n        break\n    end\nend","category":"page"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"When to use:","category":"page"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"Need to break out of loop early\nComplex control flow\nMixed-schema files\nMemory-efficient iteration","category":"page"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"Example: Find First Record Matching Condition","category":"page"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"using DBN\n\nfunction find_first_large_trade(filename, threshold)\n    for trade in DBNStream(filename)\n        if trade.size >= threshold\n            return trade\n        end\n    end\n    return nothing\nend\n\nlarge_trade = find_first_large_trade(\"trades.dbn\", 50_000)\nif large_trade !== nothing\n    println(\"Found trade: $(price_to_float(large_trade.price)) @ $(large_trade.size)\")\nend","category":"page"},{"location":"guide/reading/#Approach-4:-Generic-Reader-(For-Quick-Exploration)","page":"Reading Data","title":"Approach 4: Generic Reader (For Quick Exploration)","text":"","category":"section"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"Simple, but slower than type-specific readers:","category":"page"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"# Works with any schema, but 5-6x slower\nrecords = read_dbn(\"file.dbn\")\n\n# With metadata\nmetadata, records = read_dbn_with_metadata(\"file.dbn\")","category":"page"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"When to use:","category":"page"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"Quick exploration\nUnknown schema\nSmall files where performance doesn't matter\nPrototyping","category":"page"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"Example:","category":"page"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"using DBN\n\n# Quick look at a file\nmetadata, records = read_dbn_with_metadata(\"unknown.dbn\")\nprintln(\"Schema: $(metadata.schema)\")\nprintln(\"Records: $(length(records))\")\nprintln(\"First record type: $(typeof(records[1]))\")","category":"page"},{"location":"guide/reading/#Working-with-Compressed-Files","page":"Reading Data","title":"Working with Compressed Files","text":"","category":"section"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"All reading methods transparently handle Zstd compression:","category":"page"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"# Compression is auto-detected by .zst extension\ntrades = read_trades(\"file.dbn.zst\")\n\nforeach_trade(\"compressed.dbn.zst\") do trade\n    # Process compressed data\nend\n\nfor record in DBNStream(\"data.dbn.zst\")\n    # Iterate compressed data\nend","category":"page"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"No special handling needed - DBN.jl detects compression automatically!","category":"page"},{"location":"guide/reading/#Reading-Metadata","page":"Reading Data","title":"Reading Metadata","text":"","category":"section"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"Get file metadata without reading all records:","category":"page"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"# Read only metadata (fast)\nmetadata, records = read_dbn_with_metadata(\"file.dbn\")\n\n# Metadata fields\nprintln(\"Dataset: $(metadata.dataset)\")\nprintln(\"Schema: $(metadata.schema)\")\nprintln(\"Start: $(ts_to_datetime(metadata.start_ts))\")\nprintln(\"End: $(ts_to_datetime(metadata.end_ts))\")\nprintln(\"Limit: $(metadata.limit)\")\nprintln(\"Symbol type: $(metadata.stype_in) → $(metadata.stype_out)\")","category":"page"},{"location":"guide/reading/#Mixed-Schema-Files","page":"Reading Data","title":"Mixed-Schema Files","text":"","category":"section"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"For files containing multiple message types:","category":"page"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"# Generic reading\nrecords = read_dbn(\"mixed_schema.dbn\")\n\n# Type checking\nfor record in records\n    if record isa TradeMsg\n        # Handle trade\n    elseif record isa MBOMsg\n        # Handle MBO\n    elseif record isa OHLCVMsg\n        # Handle OHLCV\n    end\nend","category":"page"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"Or with streaming:","category":"page"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"for record in DBNStream(\"mixed.dbn\")\n    if record isa TradeMsg\n        process_trade(record)\n    elseif record isa MBOMsg\n        process_mbo(record)\n    end\nend","category":"page"},{"location":"guide/reading/#Performance-Tips","page":"Reading Data","title":"Performance Tips","text":"","category":"section"},{"location":"guide/reading/#1.-Use-Type-Specific-Readers-When-Possible","page":"Reading Data","title":"1. Use Type-Specific Readers When Possible","text":"","category":"section"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"# ❌ Slower (generic)\nrecords = read_dbn(\"trades.dbn\")\n\n# ✅ Faster (5-6x speedup)\ntrades = read_trades(\"trades.dbn\")","category":"page"},{"location":"guide/reading/#2.-Use-Callbacks-for-Pure-Processing","page":"Reading Data","title":"2. Use Callbacks for Pure Processing","text":"","category":"section"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"# ❌ Slower (allocates array)\ntrades = read_trades(\"huge_file.dbn\")\ntotal = sum(t.size for t in trades)\n\n# ✅ Faster (near-zero allocation)\ntotal = Ref(0)\nforeach_trade(\"huge_file.dbn\") do trade\n    total[] += trade.size\nend","category":"page"},{"location":"guide/reading/#3.-Pre-allocate-for-Filtering","page":"Reading Data","title":"3. Pre-allocate for Filtering","text":"","category":"section"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"# ✅ Pre-allocate if you know approximate size\nfiltered = Vector{TradeMsg}()\nsizehint!(filtered, 100_000)  # Reserve space\n\nforeach_trade(\"file.dbn\") do trade\n    if trade.size > 1000\n        push!(filtered, trade)\n    end\nend","category":"page"},{"location":"guide/reading/#4.-Process-Compressed-Files-Directly","page":"Reading Data","title":"4. Process Compressed Files Directly","text":"","category":"section"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"# ✅ No need to decompress first\nforeach_trade(\"file.dbn.zst\") do trade\n    # Process directly from compressed file\nend","category":"page"},{"location":"guide/reading/#Error-Handling","page":"Reading Data","title":"Error Handling","text":"","category":"section"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"using DBN\n\ntry\n    records = read_dbn(\"file.dbn\")\ncatch e\n    if e isa SystemError\n        println(\"File not found or cannot be opened\")\n    elseif e isa ErrorException\n        println(\"Error reading file: $(e.msg)\")\n    else\n        rethrow(e)\n    end\nend","category":"page"},{"location":"guide/reading/#Common-Patterns","page":"Reading Data","title":"Common Patterns","text":"","category":"section"},{"location":"guide/reading/#Count-Records-by-Type","page":"Reading Data","title":"Count Records by Type","text":"","category":"section"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"counts = Dict{Symbol, Int}()\n\nfor record in DBNStream(\"mixed.dbn\")\n    type_name = Symbol(typeof(record))\n    counts[type_name] = get(counts, type_name, 0) + 1\nend\n\nfor (type, count) in counts\n    println(\"$type: $count\")\nend","category":"page"},{"location":"guide/reading/#Extract-Time-Range","page":"Reading Data","title":"Extract Time Range","text":"","category":"section"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"using Dates\n\nstart_time = datetime_to_ts(DateTime(2024, 1, 1, 9, 30))\nend_time = datetime_to_ts(DateTime(2024, 1, 1, 16, 0))\n\nfiltered = TradeMsg[]\nforeach_trade(\"file.dbn\") do trade\n    if start_time <= trade.hd.ts_event <= end_time\n        push!(filtered, trade)\n    end\nend","category":"page"},{"location":"guide/reading/#Sample-Every-Nth-Record","page":"Reading Data","title":"Sample Every Nth Record","text":"","category":"section"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"sampled = TradeMsg[]\ncounter = Ref(0)\n\nforeach_trade(\"file.dbn\") do trade\n    counter[] += 1\n    if counter[] % 100 == 0  # Keep every 100th record\n        push!(sampled, trade)\n    end\nend","category":"page"},{"location":"guide/reading/#See-Also","page":"Reading Data","title":"See Also","text":"","category":"section"},{"location":"guide/reading/","page":"Reading Data","title":"Reading Data","text":"Writing Data - How to write DBN files\nStreaming Guide - Detailed streaming documentation\nPerformance Guide - Optimization techniques\nAPI Reference - Reading - Complete function reference\nDatabento Schemas - Schema details","category":"page"},{"location":"quickstart/#Quick-Start-Guide","page":"Quick Start","title":"Quick Start Guide","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"Get up and running with DBN.jl in 5 minutes!","category":"page"},{"location":"quickstart/#Installation","page":"Quick Start","title":"Installation","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"using Pkg\nPkg.add(url=\"https://github.com/tbeason/DBN.jl\")","category":"page"},{"location":"quickstart/#Basic-Usage","page":"Quick Start","title":"Basic Usage","text":"","category":"section"},{"location":"quickstart/#Reading-a-DBN-File","page":"Quick Start","title":"Reading a DBN File","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"The simplest way to read a DBN file:","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"using DBN\n\n# Read entire file into memory\nrecords = read_dbn(\"trades.dbn\")\n\n# Read with metadata\nmetadata, records = read_dbn_with_metadata(\"trades.dbn\")","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"For better performance with known schemas, use type-specific readers:","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"# 5-6x faster than generic read_dbn()\ntrades = read_trades(\"trades.dbn\")\nmbos = read_mbo(\"mbo.dbn\")\nohlcv = read_ohlcv(\"ohlcv.dbn\")","category":"page"},{"location":"quickstart/#Streaming-Large-Files","page":"Quick Start","title":"Streaming Large Files","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"For files too large to fit in memory, use streaming:","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"# Iterator pattern\nfor record in DBNStream(\"large_file.dbn.zst\")\n    # Process each record\n    println(\"Price: $(price_to_float(record.price))\")\nend","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"For maximum performance (up to 40M records/sec), use callbacks:","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"# Near-zero allocation streaming\ntotal_volume = Ref(0)\nforeach_trade(\"trades.dbn\") do trade\n    total_volume[] += trade.size\nend\nprintln(\"Total volume: $(total_volume[])\")","category":"page"},{"location":"quickstart/#Writing-DBN-Files","page":"Quick Start","title":"Writing DBN Files","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"Create a DBN file from Julia data:","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"using DBN, Dates\n\n# Create metadata\nmetadata = Metadata(\n    UInt8(3),                    # DBN version\n    \"XNAS\",                      # dataset\n    Schema.TRADES,               # schema\n    datetime_to_ts(DateTime(2024, 1, 1)),\n    datetime_to_ts(DateTime(2024, 1, 2)),\n    UInt64(1000),                # limit\n    SType.RAW_SYMBOL,            # stype_in\n    SType.RAW_SYMBOL,            # stype_out\n    false,                       # ts_out\n    String[],                    # symbols\n    String[],                    # partial\n    String[],                    # not_found\n    Tuple{String, String, Int64, Int64}[]  # mappings\n)\n\n# Create a trade message\ntrade = TradeMsg(\n    RecordHeader(\n        UInt8(sizeof(TradeMsg)),\n        RType.MBP_0_MSG,\n        UInt16(1),               # publisher_id\n        UInt32(12345),           # instrument_id\n        datetime_to_ts(DateTime(2024, 1, 1, 9, 30))\n    ),\n    float_to_price(100.50),      # price (fixed-point)\n    UInt32(100),                 # size\n    Action.TRADE,\n    Side.BID,\n    UInt8(0),                    # flags\n    UInt8(0),                    # depth\n    datetime_to_ts(DateTime(2024, 1, 1, 9, 30)),  # ts_recv\n    Int32(0),                    # ts_in_delta\n    UInt32(1)                    # sequence\n)\n\n# Write to file\nwrite_dbn(\"output.dbn\", metadata, [trade])\n\n# Write with compression\nwrite_dbn(\"output.dbn.zst\", metadata, [trade])","category":"page"},{"location":"quickstart/#Streaming-Writer-(Real-time-Data)","page":"Quick Start","title":"Streaming Writer (Real-time Data)","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"For writing data as it arrives:","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"# Create a streaming writer\nwriter = DBNStreamWriter(\"live_data.dbn\", \"XNAS\", Schema.TRADES)\n\n# Write records as they arrive\nfor price in [100.0, 100.25, 100.50, 100.75, 101.0]\n    trade = TradeMsg(\n        RecordHeader(\n            UInt8(sizeof(TradeMsg)),\n            RType.MBP_0_MSG,\n            UInt16(1),\n            UInt32(12345),\n            datetime_to_ts(now())\n        ),\n        float_to_price(price),\n        UInt32(100),\n        Action.TRADE,\n        Side.BID,\n        UInt8(0), UInt8(0),\n        datetime_to_ts(now()),\n        Int32(0),\n        UInt32(1)\n    )\n    write_record!(writer, trade)\nend\n\n# Close the writer\nclose_writer!(writer)","category":"page"},{"location":"quickstart/#Format-Conversion","page":"Quick Start","title":"Format Conversion","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"Convert DBN files to other formats:","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"# DBN → CSV\ndbn_to_csv(\"trades.dbn\", \"trades.csv\")\n\n# DBN → JSON\ndbn_to_json(\"trades.dbn\", \"trades.json\")\n\n# DBN → Parquet\ndbn_to_parquet(\"trades.dbn\", \"output_dir/\")\n\n# DBN → DataFrame\ndf = records_to_dataframe(records)","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"Convert other formats to DBN:","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"# JSON → DBN\njson_to_dbn(\"trades.json\", \"trades.dbn\")\n\n# CSV → DBN (requires schema specification)\ncsv_to_dbn(\"trades.csv\", \"trades.dbn\",\n           schema=Schema.TRADES,\n           dataset=\"XNAS\")\n\n# Parquet → DBN (requires schema specification)\nparquet_to_dbn(\"trades.parquet\", \"trades.dbn\",\n               schema=Schema.TRADES,\n               dataset=\"XNAS\")","category":"page"},{"location":"quickstart/#Working-with-Compressed-Files","page":"Quick Start","title":"Working with Compressed Files","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"DBN.jl transparently handles Zstd-compressed files:","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"# Read compressed files (automatically detected by .zst extension)\nrecords = read_dbn(\"trades.dbn.zst\")\n\n# Stream compressed files\nfor record in DBNStream(\"large_file.dbn.zst\")\n    # Process record\nend\n\n# Compress existing files\ncompress_dbn_file(\"input.dbn\", \"output.dbn.zst\")","category":"page"},{"location":"quickstart/#Utility-Functions","page":"Quick Start","title":"Utility Functions","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"Common operations for working with DBN data:","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"# Price conversions (DBN uses fixed-point arithmetic)\nprice_float = price_to_float(1005000)    # → 100.50\nprice_fixed = float_to_price(100.50)     # → 1005000\n\n# Timestamp conversions (nanoseconds ↔ DateTime)\ndt = ts_to_datetime(1609459200000000000) # → DateTime\nts = datetime_to_ts(DateTime(2021, 1, 1)) # → nanoseconds (Int64)","category":"page"},{"location":"quickstart/#Common-Patterns","page":"Quick Start","title":"Common Patterns","text":"","category":"section"},{"location":"quickstart/#Processing-Historical-Data","page":"Quick Start","title":"Processing Historical Data","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"# Count trades by side\nbid_count = 0\nask_count = 0\n\nforeach_trade(\"historical_trades.dbn.zst\") do trade\n    if trade.side == Side.BID\n        bid_count += 1\n    elseif trade.side == Side.ASK\n        ask_count += 1\n    end\nend\n\nprintln(\"Bids: $bid_count, Asks: $ask_count\")","category":"page"},{"location":"quickstart/#Filtering-Records","page":"Quick Start","title":"Filtering Records","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"# Extract high-volume trades\nhigh_volume = TradeMsg[]\n\nforeach_trade(\"trades.dbn\") do trade\n    if trade.size > 10_000\n        push!(high_volume, trade)\n    end\nend\n\n# Write filtered data to new file\nmetadata, _ = read_dbn_with_metadata(\"trades.dbn\")\nwrite_dbn(\"high_volume_trades.dbn\", metadata, high_volume)","category":"page"},{"location":"quickstart/#Working-with-Multiple-Schemas","page":"Quick Start","title":"Working with Multiple Schemas","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"# Read a file with mixed message types\nfor record in DBNStream(\"mixed.dbn\")\n    if record isa TradeMsg\n        # Handle trade\n    elseif record isa MBOMsg\n        # Handle MBO\n    end\nend","category":"page"},{"location":"quickstart/#Next-Steps","page":"Quick Start","title":"Next Steps","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"Now that you know the basics:","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"Learn more about reading: Reading Data Guide\nExplore streaming options: Streaming Guide\nCheck all available functions: API Reference\nOptimize for performance: Performance Guide","category":"page"},{"location":"quickstart/#Need-Help?","page":"Quick Start","title":"Need Help?","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"Troubleshooting: See common issues\nDatabento Format: Read the official DBN documentation\nSchemas: Learn about DBN schemas\nBug Reports: Open an issue on GitHub","category":"page"},{"location":"api/writing/#Writing-API-Reference","page":"Writing","title":"Writing API Reference","text":"","category":"section"},{"location":"api/writing/","page":"Writing","title":"Writing","text":"Functions for writing DBN files.","category":"page"},{"location":"api/writing/#Bulk-Writing","page":"Writing","title":"Bulk Writing","text":"","category":"section"},{"location":"api/writing/#DBN.write_dbn","page":"Writing","title":"DBN.write_dbn","text":"write_dbn(filename::String, metadata::Metadata, records)\n\nConvenience function to write a complete DBN file with automatic compression support.\n\nArguments\n\nfilename::String: Output file path (use .zst extension for compression)\nmetadata::Metadata: File metadata\nrecords: Collection of records to write\n\nDetails\n\nCreates a complete DBN file with header and all records. Automatically handles:\n\nFile creation and management\nZstd compression (when filename ends with .zst)\nHeader writing (uncompressed for format detection)\nRecord serialization\nResource cleanup\n\nExample\n\nmetadata = Metadata(3, \"TEST\", Schema.TRADES, start_ts, end_ts, length(records),\n                   SType.RAW_SYMBOL, SType.RAW_SYMBOL, false, symbols, [], [], [])\n# Uncompressed\nwrite_dbn(\"output.dbn\", metadata, records)\n# Compressed\nwrite_dbn(\"output.dbn.zst\", metadata, records)\n\n\n\n\n\n","category":"function"},{"location":"api/writing/#Low-Level-Writing","page":"Writing","title":"Low-Level Writing","text":"","category":"section"},{"location":"api/writing/#DBN.write_header","page":"Writing","title":"DBN.write_header","text":"write_header(encoder::DBNEncoder)\n\nWrite the DBN file header including magic bytes, version, and metadata.\n\nArguments\n\nencoder::DBNEncoder: Encoder instance containing metadata to write\n\nDetails\n\nWrites the complete DBN header in the correct binary format:\n\nMagic bytes \"DBN\"\nVersion number\nMetadata length\nComplete metadata section with all fields\n\nWrites to the current IO stream (encoder.io), which may be compressed or uncompressed. For compressed files (.zst), the entire file including the header is compressed.\n\n\n\n\n\n","category":"function"},{"location":"api/writing/#DBN.finalize_encoder","page":"Writing","title":"DBN.finalize_encoder","text":"finalize_encoder(encoder::DBNEncoder)\n\nFinalize the encoder and flush any remaining data.\n\nArguments\n\nencoder::DBNEncoder: Encoder to finalize\n\nDetails\n\nEnsures all buffered data is written to the output stream. Should be called when finished writing all records.\n\n\n\n\n\n","category":"function"},{"location":"api/writing/#Streaming-Writer","page":"Writing","title":"Streaming Writer","text":"","category":"section"},{"location":"api/writing/","page":"Writing","title":"Writing","text":"For writing data as it arrives (real-time or sequential processing).","category":"page"},{"location":"api/writing/#DBN.DBNStreamWriter","page":"Writing","title":"DBN.DBNStreamWriter","text":"DBNStreamWriter\n\nStreaming writer for real-time DBN data capture with automatic timestamp tracking.\n\nFields\n\nencoder::DBNEncoder: Underlying encoder for writing data\nrecord_count::Int64: Number of records written\nfirst_ts::Int64: First timestamp encountered\nlast_ts::Int64: Last timestamp encountered  \nauto_flush::Bool: Whether to automatically flush data\nflush_interval::Int: Number of records between automatic flushes\nlast_flush_count::Int64: Record count at last flush\n\nUsage\n\nwriter = DBNStreamWriter(\"live.dbn\", \"XNAS\", Schema.TRADES)\nwrite_record!(writer, trade_record)\nclose_writer!(writer)\n\n\n\n\n\n","category":"type"},{"location":"api/writing/#DBN.write_record!","page":"Writing","title":"DBN.write_record!","text":"write_record!(writer::DBNStreamWriter, record)\n\nWrite a record to the streaming writer and update timestamps.\n\nArguments\n\nwriter::DBNStreamWriter: Writer instance\nrecord: Record to write (any DBN message type)\n\nDetails\n\nWrites the record and automatically:\n\nUpdates first/last timestamp tracking\nIncrements record count\nPerforms auto-flush if enabled and interval reached\n\nThrows\n\nIOError: If the writer has been closed\n\n\n\n\n\n","category":"function"},{"location":"api/writing/#DBN.close_writer!","page":"Writing","title":"DBN.close_writer!","text":"close_writer!(writer::DBNStreamWriter)\n\nFinalize and close the streaming writer, updating the header with final metadata.\n\nArguments\n\nwriter::DBNStreamWriter: Writer to close\n\nDetails\n\nFinalizes the file by:\n\nFlushing any remaining data\nUpdating the header with final timestamps and record count\nProperly closing the file handle\n\nThe header is rewritten with accurate metadata based on all records written.\n\n\n\n\n\n","category":"function"},{"location":"api/writing/#Compression","page":"Writing","title":"Compression","text":"","category":"section"},{"location":"api/writing/#DBN.compress_dbn_file","page":"Writing","title":"DBN.compress_dbn_file","text":"compress_dbn_file(input_file::String, output_file::String; \n                 compression_level::Int=3,\n                 delete_original::Bool=false)\n\nCompress a DBN file using Zstd compression.\n\nArguments\n\ninput_file::String: Path to input DBN file\noutput_file::String: Path for compressed output file\ncompression_level::Int: Zstd compression level (default: 3)\ndelete_original::Bool: Whether to delete input file after compression (default: false)\n\nReturns\n\nNamedTuple: Compression statistics including:\noriginal_size::Int: Original file size in bytes\ncompressed_size::Int: Compressed file size in bytes\ncompression_ratio::Float64: Compression ratio (0.0-1.0)\nspace_saved::Int: Bytes saved by compression\n\nDetails\n\nPerforms streaming compression to handle large files efficiently. Preserves all metadata and record integrity.\n\n\n\n\n\n","category":"function"},{"location":"api/writing/#DBN.compress_daily_files","page":"Writing","title":"DBN.compress_daily_files","text":"compress_daily_files(date::Date, base_dir::String; \n                    pattern::Regex=r\".*\\.dbn$\",\n                    workers::Int=Threads.nthreads())\n\nCompress multiple DBN files for a specific date in parallel.\n\nArguments\n\ndate::Date: Date to process (looks for files containing \"yyyy-mm-dd\")\nbase_dir::String: Directory containing DBN files\npattern::Regex: File pattern to match (default: r\".*.dbn$(Expr(:incomplete, Base.Meta.ParseError(\"ParseError:\\n# Error @ none:1:3\\n\\\")\\n# └ ── unterminated string literal\", Base.JuliaSyntax.ParseError(Base.JuliaSyntax.SourceFile(\"\\\")\", 0, \"none\", 1, [1, 3]), Base.JuliaSyntax.Diagnostic[Base.JuliaSyntax.Diagnostic(3, 2, :error, \"unterminated string literal\")], :string))))\nworkers::Int: Number of parallel workers (default: thread count)\n\nReturns\n\nVector: Compression results for each file (or nothing for failures)\n\nDetails\n\nFinds all uncompressed DBN files matching the date pattern and compresses them in parallel. Original files are deleted after successful compression. Provides detailed logging of compression results and any errors.\n\nExample\n\nresults = compress_daily_files(Date(\"2024-01-01\"), \"data/\")\n\n\n\n\n\n","category":"function"},{"location":"api/writing/#Usage-Patterns","page":"Writing","title":"Usage Patterns","text":"","category":"section"},{"location":"api/writing/#Bulk-Writing-2","page":"Writing","title":"Bulk Writing","text":"","category":"section"},{"location":"api/writing/","page":"Writing","title":"Writing","text":"Use write_dbn() when you have all records in memory:","category":"page"},{"location":"api/writing/","page":"Writing","title":"Writing","text":"write_dbn(\"output.dbn\", metadata, records)\n\n# With compression\nwrite_dbn(\"output.dbn.zst\", metadata, records)","category":"page"},{"location":"api/writing/#Streaming-Writing","page":"Writing","title":"Streaming Writing","text":"","category":"section"},{"location":"api/writing/","page":"Writing","title":"Writing","text":"Use DBNStreamWriter for real-time or sequential data:","category":"page"},{"location":"api/writing/","page":"Writing","title":"Writing","text":"writer = DBNStreamWriter(\"output.dbn\", \"XNAS\", Schema.TRADES)\n\nfor record in data_source\n    write_record!(writer, record)\nend\n\nclose_writer!(writer)","category":"page"},{"location":"api/writing/#Performance-Tips","page":"Writing","title":"Performance Tips","text":"","category":"section"},{"location":"api/writing/","page":"Writing","title":"Writing","text":"Bulk writing is faster than streaming when you have all data\nUse compression for storage (2-3x smaller files)\nPre-allocate vectors when building record collections\nAlways close stream writers to finalize the file","category":"page"},{"location":"api/writing/","page":"Writing","title":"Writing","text":"See the Writing Guide for detailed examples and best practices.","category":"page"},{"location":"#DBN.jl-Documentation","page":"Home","title":"DBN.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia implementation of the Databento Binary Encoding (DBN) message encoding and storage format for normalized market data.","category":"page"},{"location":"","page":"Home","title":"Home","text":"warning: Development Status\nThis package is under active development. While core functionality is complete and tested for byte-for-byte compatibility with the official Rust implementation, the API may still evolve. Production use is possible but not yet recommended.","category":"page"},{"location":"#What-is-DBN?","page":"Home","title":"What is DBN?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DBN (Databento Binary Encoding) is a fast, compact binary format for storing and transmitting market data. It's designed for:","category":"page"},{"location":"","page":"Home","title":"Home","text":"High throughput: Optimized for reading/writing millions of records per second\nCompact storage: Efficient binary encoding with optional Zstd compression\nStandardization: Consistent format across multiple data vendors and asset classes","category":"page"},{"location":"","page":"Home","title":"Home","text":"For details on the DBN format specification, see the official Databento documentation.","category":"page"},{"location":"#Why-DBN.jl?","page":"Home","title":"Why DBN.jl?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DBN.jl brings the power of DBN to Julia with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"✅ Complete DBN v3 Format Support - All message types and schemas\n✅ Efficient Streaming - Read and write large files with minimal memory\n✅ Zstd Compression - Transparent compression/decompression support\n✅ Format Conversion - Bidirectional conversion between DBN, CSV, JSON, and Parquet\n✅ Byte-for-byte Compatibility - Tested against official Rust implementation\n✅ High Performance - Up to 40M records/sec with callback streaming\n✅ All Message Types - Trades, MBO, MBP, OHLCV, Status, and more\n✅ Precision Handling - Nanosecond timestamps and fixed-point price arithmetic","category":"page"},{"location":"#Quick-Example","page":"Home","title":"Quick Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using DBN\n\n# Read a DBN file\ntrades = read_trades(\"trades.dbn\")\n\n# Process with high-performance streaming (40M records/sec)\ntotal_volume = Ref(0)\nforeach_trade(\"large_file.dbn.zst\") do trade\n    total_volume[] += trade.size\nend\n\n# Convert to other formats\ndbn_to_csv(\"trades.dbn\", \"trades.csv\")\ndbn_to_parquet(\"trades.dbn\", \"output_dir/\")","category":"page"},{"location":"#Performance-Characteristics","page":"Home","title":"Performance Characteristics","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DBN.jl is optimized for high-throughput market data processing:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Operation Throughput Method\nReading Up to 40M records/sec Callback streaming (foreach_trade, etc.)\nReading 5-6x faster than generic Type-specific readers (read_trades, read_mbo, etc.)\nWriting 11M records/sec Bulk operations (write_dbn)","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the Performance page for detailed benchmarks and optimization tips.","category":"page"},{"location":"#Format-Support","page":"Home","title":"Format Support","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DBN Versions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"✅ DBN v2 (read and write)\n✅ DBN v3 (read and write)\n❌ DBN v1 (not supported - use Databento CLI to upgrade)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Conversion Formats:","category":"page"},{"location":"","page":"Home","title":"Home","text":"CSV (read and write)\nJSON/JSONL (read and write)\nParquet (read and write)\nDataFrames (write)","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Install DBN.jl\nFollow the Quick Start Guide\nExplore the User Guide\nCheck the API Reference","category":"page"},{"location":"#Getting-Help","page":"Home","title":"Getting Help","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation: You're reading it! Browse the sections in the sidebar\nIssues: Report bugs or request features on GitHub\nDatabento Docs: For DBN format details, see databento.com/docs","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DBN.jl is not affiliated with Databento.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The official DBN implementations (dbn) are distributed under the Apache 2.0 License.","category":"page"},{"location":"guide/streaming/#Streaming","page":"Streaming","title":"Streaming","text":"","category":"section"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"Streaming is essential for working with large DBN files that don't fit in memory or when you want maximum performance. DBN.jl provides two streaming patterns: callback-based (fastest) and iterator-based (most flexible).","category":"page"},{"location":"guide/streaming/#Why-Stream?","page":"Streaming","title":"Why Stream?","text":"","category":"section"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"Memory Efficiency: Process files larger than your available RAM","category":"page"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"A 10M record trade file (~460 MB) requires only KB of memory when streaming\nCan process billion-record files on modest hardware","category":"page"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"Performance: Callback streaming achieves up to 40M records/sec","category":"page"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"Near-zero allocations during processing\nMinimal overhead per record\nOptimal for aggregation and filtering","category":"page"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"Flexibility: Process data as it's read","category":"page"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"Early termination when condition is met\nReal-time processing\nConditional logic during iteration","category":"page"},{"location":"guide/streaming/#Callback-Pattern-(Fastest)","page":"Streaming","title":"Callback Pattern (Fastest)","text":"","category":"section"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"The callback pattern uses foreach_*() functions for maximum performance.","category":"page"},{"location":"guide/streaming/#Basic-Usage","page":"Streaming","title":"Basic Usage","text":"","category":"section"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"using DBN\n\n# Process all trades with a callback\ntotal_volume = Ref(0)\nforeach_trade(\"trades.dbn\") do trade\n    total_volume[] += trade.size\nend\nprintln(\"Total volume: $(total_volume[])\")","category":"page"},{"location":"guide/streaming/#Available-Callback-Functions","page":"Streaming","title":"Available Callback Functions","text":"","category":"section"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"Market Data:","category":"page"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"foreach_trade() - Trade messages\nforeach_mbo() - Market-by-order\nforeach_mbp1() - Top-of-book MBP\nforeach_mbp10() - 10-level MBP\nforeach_tbbo() - Top BBO\nforeach_ohlcv() - OHLCV bars (generic)\nforeach_ohlcv_1s(), foreach_ohlcv_1m(), foreach_ohlcv_1h(), foreach_ohlcv_1d() - Time-specific OHLCV","category":"page"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"Other Schemas:","category":"page"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"foreach_cmbp1() - Consolidated MBP-1\nforeach_cbbo1s(), foreach_cbbo1m() - Consolidated BBO\nforeach_tcbbo() - Top consolidated BBO\nforeach_bbo1s(), foreach_bbo1m() - BBO","category":"page"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"And more! See the Streaming API Reference for the complete list.","category":"page"},{"location":"guide/streaming/#Performance-Characteristics","page":"Streaming","title":"Performance Characteristics","text":"","category":"section"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"Callback streaming achieves exceptional performance through:","category":"page"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"Zero allocation per record (records reused internally)\nType stability (compiler optimizes callback)\nMinimal overhead (direct function calls)","category":"page"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"Benchmark results (10M trades, uncompressed):","category":"page"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"Callback streaming:  42.37 M records/sec (0.236s, 0.1 MB allocated)\nIterator streaming:  10.21 M records/sec (0.979s, 1221 MB allocated)\nBulk read:           6.86 M records/sec  (1.457s, 687 MB allocated)","category":"page"},{"location":"guide/streaming/#Common-Patterns","page":"Streaming","title":"Common Patterns","text":"","category":"section"},{"location":"guide/streaming/#Aggregation","page":"Streaming","title":"Aggregation","text":"","category":"section"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"using DBN\n\n# Calculate VWAP\nprice_volume_sum = Ref(0.0)\nvolume_sum = Ref(0)\n\nforeach_trade(\"trades.dbn.zst\") do trade\n    price = price_to_float(trade.price)\n    price_volume_sum[] += price * trade.size\n    volume_sum[] += trade.size\nend\n\nvwap = price_volume_sum[] / volume_sum[]\nprintln(\"VWAP: $vwap\")","category":"page"},{"location":"guide/streaming/#Counting","page":"Streaming","title":"Counting","text":"","category":"section"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"# Count by side\nbid_count = Ref(0)\nask_count = Ref(0)\n\nforeach_trade(\"trades.dbn\") do trade\n    if trade.side == Side.BID\n        bid_count[] += 1\n    else\n        ask_count[] += 1\n    end\nend\n\nprintln(\"Bids: $(bid_count[]), Asks: $(ask_count[])\")","category":"page"},{"location":"guide/streaming/#Filtering-(with-collection)","page":"Streaming","title":"Filtering (with collection)","text":"","category":"section"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"# Extract specific records\nlarge_trades = TradeMsg[]\n\nforeach_trade(\"all_trades.dbn\") do trade\n    if trade.size > 10_000\n        push!(large_trades, trade)\n    end\nend\n\nprintln(\"Found $(length(large_trades)) large trades\")","category":"page"},{"location":"guide/streaming/#Time-windowed-Aggregation","page":"Streaming","title":"Time-windowed Aggregation","text":"","category":"section"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"using Dates\n\n# Group trades into 5-minute buckets\nbuckets = Dict{DateTime, Int}()\n\nforeach_trade(\"trades.dbn\") do trade\n    bucket = floor(ts_to_datetime(trade.hd.ts_event), Minute(5))\n    buckets[bucket] = get(buckets, bucket, 0) + trade.size\nend\n\n# Print volume per bucket\nfor (time, volume) in sort(collect(buckets))\n    println(\"$time: $volume\")\nend","category":"page"},{"location":"guide/streaming/#Statistical-Calculation","page":"Streaming","title":"Statistical Calculation","text":"","category":"section"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"# Calculate mean and std dev of trade sizes (online algorithm)\nn = Ref(0)\nmean = Ref(0.0)\nm2 = Ref(0.0)\n\nforeach_trade(\"trades.dbn\") do trade\n    n[] += 1\n    delta = trade.size - mean[]\n    mean[] += delta / n[]\n    m2[] += delta * (trade.size - mean[])\nend\n\nvariance = m2[] / n[]\nstddev = sqrt(variance)\n\nprintln(\"Mean size: $(mean[])\")\nprintln(\"Std dev: $stddev\")","category":"page"},{"location":"guide/streaming/#Limitations","page":"Streaming","title":"Limitations","text":"","category":"section"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"warning: Cannot Break Early\nCallback functions process all records - you cannot break out early. Use the iterator pattern if you need early termination.","category":"page"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"# ❌ Cannot do this with callbacks\nforeach_trade(\"trades.dbn\") do trade\n    if trade.size > 100_000\n        break  # ERROR: Cannot break from callback\n    end\nend\n\n# ✅ Use iterator instead\nfor trade in DBNStream(\"trades.dbn\")\n    if trade.size > 100_000\n        println(\"Found large trade!\")\n        break  # OK\n    end\nend","category":"page"},{"location":"guide/streaming/#Iterator-Pattern-(Most-Flexible)","page":"Streaming","title":"Iterator Pattern (Most Flexible)","text":"","category":"section"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"The iterator pattern uses DBNStream() for maximum flexibility.","category":"page"},{"location":"guide/streaming/#Basic-Usage-2","page":"Streaming","title":"Basic Usage","text":"","category":"section"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"using DBN\n\n# Iterate through records\nfor record in DBNStream(\"file.dbn\")\n    # Process record\n    println(\"Price: $(price_to_float(record.price))\")\nend","category":"page"},{"location":"guide/streaming/#Features","page":"Streaming","title":"Features","text":"","category":"section"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"Advantages:","category":"page"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"Can break early\nWorks with any Julia iterator tools (take, filter, etc.)\nHandles mixed-schema files\nMore familiar pattern for Julia users","category":"page"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"Disadvantages:","category":"page"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"Slower than callbacks (still faster than bulk read)\nHigher memory allocation\nLess optimized by compiler","category":"page"},{"location":"guide/streaming/#Common-Patterns-2","page":"Streaming","title":"Common Patterns","text":"","category":"section"},{"location":"guide/streaming/#Early-Termination","page":"Streaming","title":"Early Termination","text":"","category":"section"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"# Find first record matching condition\nfor trade in DBNStream(\"trades.dbn\")\n    if trade.size > 50_000\n        println(\"First large trade: $(price_to_float(trade.price))\")\n        break\n    end\nend","category":"page"},{"location":"guide/streaming/#Limited-Processing","page":"Streaming","title":"Limited Processing","text":"","category":"section"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"# Process only first N records\nusing IterTools\n\nfor (i, trade) in enumerate(DBNStream(\"trades.dbn\"))\n    println(\"Trade $i: $(price_to_float(trade.price))\")\n    if i >= 1000\n        break\n    end\nend","category":"page"},{"location":"guide/streaming/#Conditional-Collection","page":"Streaming","title":"Conditional Collection","text":"","category":"section"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"# Collect records matching complex criteria\nselected = TradeMsg[]\n\nfor trade in DBNStream(\"trades.dbn\")\n    # Complex filtering logic\n    if meets_criteria(trade)\n        push!(selected, trade)\n\n        # Stop after finding enough\n        if length(selected) >= 100\n            break\n        end\n    end\nend","category":"page"},{"location":"guide/streaming/#Mixed-Schema-Handling","page":"Streaming","title":"Mixed Schema Handling","text":"","category":"section"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"# Count different message types\ncounts = Dict{DataType, Int}()\n\nfor record in DBNStream(\"mixed.dbn\")\n    record_type = typeof(record)\n    counts[record_type] = get(counts, record_type, 0) + 1\nend\n\nfor (type, count) in counts\n    println(\"$type: $count\")\nend","category":"page"},{"location":"guide/streaming/#Generic-Callback-(For-Mixed-Schemas)","page":"Streaming","title":"Generic Callback (For Mixed Schemas)","text":"","category":"section"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"For mixed-schema files with callbacks:","category":"page"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"using DBN\n\n# Generic callback with type checking\ntrade_count = Ref(0)\nmbo_count = Ref(0)\n\nforeach_record(\"mixed.dbn\", Union{TradeMsg, MBOMsg}) do record\n    if record isa TradeMsg\n        trade_count[] += 1\n    elseif record isa MBOMsg\n        mbo_count[] += 1\n    end\nend\n\nprintln(\"Trades: $(trade_count[]), MBOs: $(mbo_count[])\")","category":"page"},{"location":"guide/streaming/#Compressed-Files","page":"Streaming","title":"Compressed Files","text":"","category":"section"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"All streaming methods transparently handle compression:","category":"page"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"# Compressed files work identically\nforeach_trade(\"trades.dbn.zst\") do trade\n    # Process compressed data\nend\n\nfor record in DBNStream(\"file.dbn.zst\")\n    # Iterate compressed data\nend","category":"page"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"Compression is detected automatically by the .zst extension.","category":"page"},{"location":"guide/streaming/#Choosing-the-Right-Pattern","page":"Streaming","title":"Choosing the Right Pattern","text":"","category":"section"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"Use Case Recommended Pattern Reason\nCalculate statistics Callback (foreach_*) Maximum performance, minimal memory\nFilter all records Callback (foreach_*) Fast iteration, collect matching records\nFind first match Iterator (DBNStream) Can break early\nProcess first N records Iterator (DBNStream) Early termination\nMixed schema file Iterator (DBNStream) Easier type handling\nNeed complex control flow Iterator (DBNStream) More flexibility\nMaximum performance Callback (foreach_*) Up to 4x faster","category":"page"},{"location":"guide/streaming/#Performance-Tips","page":"Streaming","title":"Performance Tips","text":"","category":"section"},{"location":"guide/streaming/#1.-Use-Callbacks-When-Possible","page":"Streaming","title":"1. Use Callbacks When Possible","text":"","category":"section"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"# ✅ Fastest\ntotal = Ref(0)\nforeach_trade(\"file.dbn\") do trade\n    total[] += trade.size\nend\n\n# ❌ Slower\ntotal = 0\nfor trade in DBNStream(\"file.dbn\")\n    total += trade.size\nend","category":"page"},{"location":"guide/streaming/#2.-Pre-allocate-Collections","page":"Streaming","title":"2. Pre-allocate Collections","text":"","category":"section"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"# ✅ Pre-allocate\nresult = Vector{TradeMsg}()\nsizehint!(result, 100_000)\n\nforeach_trade(\"file.dbn\") do trade\n    if condition(trade)\n        push!(result, trade)\n    end\nend","category":"page"},{"location":"guide/streaming/#3.-Minimize-Work-in-Loop","page":"Streaming","title":"3. Minimize Work in Loop","text":"","category":"section"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"# ✅ Hoist constant computations\nthreshold = calculate_threshold()\n\nforeach_trade(\"file.dbn\") do trade\n    if trade.size > threshold\n        # Process\n    end\nend\n\n# ❌ Repeated computation\nforeach_trade(\"file.dbn\") do trade\n    if trade.size > calculate_threshold()  # Don't do this!\n        # Process\n    end\nend","category":"page"},{"location":"guide/streaming/#4.-Use-Refs-for-Mutable-State","page":"Streaming","title":"4. Use Refs for Mutable State","text":"","category":"section"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"# ✅ Use Ref for accumulation in callbacks\nsum = Ref(0)\nforeach_trade(\"file.dbn\") do trade\n    sum[] += trade.size\nend","category":"page"},{"location":"guide/streaming/#5.-Avoid-Type-Instability","page":"Streaming","title":"5. Avoid Type Instability","text":"","category":"section"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"# ✅ Type-stable\ntotal::Int = 0\nfor trade in DBNStream(\"file.dbn\")\n    total += trade.size  # Type is known\nend\n\n# ❌ Type-unstable\ntotal = 0\nfor trade in DBNStream(\"file.dbn\")\n    total = trade.size > 1000 ? trade.size : 0.0  # Type changes!\nend","category":"page"},{"location":"guide/streaming/#Memory-Usage-Comparison","page":"Streaming","title":"Memory Usage Comparison","text":"","category":"section"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"For a 10M record file (458 MB):","category":"page"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"Method Peak Memory Records/sec\nCallback streaming 0.1 MB 42.37 M\nIterator streaming 1221 MB 10.21 M\nBulk read 687 MB 6.86 M","category":"page"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"Callback streaming uses ~6,000x less memory than iterator streaming!","category":"page"},{"location":"guide/streaming/#Error-Handling","page":"Streaming","title":"Error Handling","text":"","category":"section"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"using DBN\n\ntry\n    foreach_trade(\"file.dbn\") do trade\n        # Process\n        if invalid(trade)\n            error(\"Invalid trade found\")\n        end\n    end\ncatch e\n    println(\"Error processing file: $(e)\")\nend","category":"page"},{"location":"guide/streaming/#See-Also","page":"Streaming","title":"See Also","text":"","category":"section"},{"location":"guide/streaming/","page":"Streaming","title":"Streaming","text":"Reading Data - Other reading approaches\nWriting Data - Writing DBN files\nAPI Reference - Streaming - Complete function reference\nPerformance Guide - Optimization techniques","category":"page"}]
}
